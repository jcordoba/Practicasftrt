-- =====================================================
-- FASE 2: POBLACI√ìN INICIAL Y CONFIGURACI√ìN RBAC
-- Sistema de Pr√°cticas Profesionales FTR - Refactoring
-- =====================================================
-- Base de datos: practicasftr
-- Fecha: $(date)
-- Prop√≥sito: Poblar nuevas tablas con datos iniciales y configurar RBAC
-- SEGURO: Solo inserta datos, no modifica estructura existentes

\echo 'üîÑ INICIANDO FASE 2: POBLACI√ìN INICIAL'
\echo ''

-- =====================================================
-- 1. CREAR T√âRMINOS ACAD√âMICOS B√ÅSICOS
-- =====================================================

\echo 'üìÖ 1. Creando t√©rminos acad√©micos b√°sicos...'

-- Insertar t√©rminos para 2024 y 2025
INSERT INTO "Term" (id, name, "startDate", "endDate", "academicYear", period, status)
VALUES 
    ('term-2024-1', '2024 - Primer Semestre', '2024-01-15 00:00:00', '2024-06-30 23:59:59', 2024, 1, 'COMPLETED'),
    ('term-2024-2', '2024 - Segundo Semestre', '2024-07-15 00:00:00', '2024-12-15 23:59:59', 2024, 2, 'COMPLETED'),
    ('term-2025-1', '2025 - Primer Semestre', '2025-01-15 00:00:00', '2025-06-30 23:59:59', 2025, 1, 'ACTIVE'),
    ('term-2025-2', '2025 - Segundo Semestre', '2025-07-15 00:00:00', '2025-12-15 23:59:59', 2025, 2, 'PLANNED')
ON CONFLICT ("academicYear", period) DO NOTHING;

\echo '‚úÖ T√©rminos acad√©micos creados'
\echo ''

-- =====================================================
-- 2. CREAR PERMISOS GRANULARES
-- =====================================================

\echo 'üîê 2. Creando permisos granulares...'

-- Permisos por m√≥dulo
INSERT INTO "PermissionNew" (name, description, module, action, resource)
VALUES 
    -- M√ìDULO USUARIOS
    ('users.create', 'Crear nuevos usuarios', 'USERS', 'CREATE', 'user'),
    ('users.read', 'Ver informaci√≥n de usuarios', 'USERS', 'READ', 'user'),
    ('users.update', 'Actualizar informaci√≥n de usuarios', 'USERS', 'UPDATE', 'user'),
    ('users.delete', 'Eliminar usuarios', 'USERS', 'DELETE', 'user'),
    ('users.manage_roles', 'Gestionar roles de usuarios', 'USERS', 'MANAGE', 'user_roles'),
    
    -- M√ìDULO CENTROS
    ('centers.create', 'Crear nuevos centros', 'CENTERS', 'CREATE', 'center'),
    ('centers.read', 'Ver informaci√≥n de centros', 'CENTERS', 'READ', 'center'),
    ('centers.update', 'Actualizar informaci√≥n de centros', 'CENTERS', 'UPDATE', 'center'),
    ('centers.delete', 'Eliminar centros', 'CENTERS', 'DELETE', 'center'),
    
    -- M√ìDULO PR√ÅCTICAS
    ('practices.create', 'Crear nuevas pr√°cticas', 'PRACTICES', 'CREATE', 'practice'),
    ('practices.read', 'Ver informaci√≥n de pr√°cticas', 'PRACTICES', 'READ', 'practice'),
    ('practices.update', 'Actualizar informaci√≥n de pr√°cticas', 'PRACTICES', 'UPDATE', 'practice'),
    ('practices.delete', 'Eliminar pr√°cticas', 'PRACTICES', 'DELETE', 'practice'),
    ('practices.assign', 'Asignar estudiantes a centros', 'PRACTICES', 'ASSIGN', 'assignment'),
    ('practices.transfer', 'Transferir estudiantes entre centros', 'PRACTICES', 'TRANSFER', 'assignment'),
    
    -- M√ìDULO EVALUACIONES
    ('evaluations.create', 'Crear evaluaciones', 'EVALUATIONS', 'CREATE', 'evaluation'),
    ('evaluations.read', 'Ver evaluaciones', 'EVALUATIONS', 'READ', 'evaluation'),
    ('evaluations.update', 'Actualizar evaluaciones', 'EVALUATIONS', 'UPDATE', 'evaluation'),
    ('evaluations.approve', 'Aprobar evaluaciones', 'EVALUATIONS', 'APPROVE', 'evaluation'),
    
    -- M√ìDULO EVIDENCIAS
    ('evidences.create', 'Subir evidencias', 'EVIDENCES', 'CREATE', 'evidence'),
    ('evidences.read', 'Ver evidencias', 'EVIDENCES', 'READ', 'evidence'),
    ('evidences.update', 'Actualizar evidencias', 'EVIDENCES', 'UPDATE', 'evidence'),
    ('evidences.approve', 'Aprobar evidencias', 'EVIDENCES', 'APPROVE', 'evidence'),
    
    -- M√ìDULO REPORTES
    ('reports.generate', 'Generar reportes', 'REPORTS', 'GENERATE', 'report'),
    ('reports.export', 'Exportar reportes', 'REPORTS', 'EXPORT', 'report'),
    
    -- M√ìDULO CONFIGURACI√ìN
    ('config.read', 'Ver configuraci√≥n del sistema', 'CONFIG', 'READ', 'config'),
    ('config.update', 'Actualizar configuraci√≥n del sistema', 'CONFIG', 'UPDATE', 'config'),
    
    -- M√ìDULO AUDITOR√çA
    ('audit.read', 'Ver logs de auditor√≠a', 'AUDIT', 'READ', 'audit_log'),
    ('audit.export', 'Exportar logs de auditor√≠a', 'AUDIT', 'EXPORT', 'audit_log')
ON CONFLICT (name) DO NOTHING;

\echo '‚úÖ Permisos granulares creados'
\echo ''

-- =====================================================
-- 3. ASIGNAR PERMISOS A ROLES EXISTENTES
-- =====================================================

\echo 'üë• 3. Asignando permisos a roles existentes...'

-- Obtener el ID del usuario administrador para las asignaciones
DO $$
DECLARE
    admin_user_id TEXT;
    student_role_id TEXT;
    pastor_role_id TEXT;
    teacher_role_id TEXT;
    coordinator_role_id TEXT;
    dean_role_id TEXT;
    admin_role_id TEXT;
BEGIN
    -- Obtener usuario administrador
    SELECT id INTO admin_user_id FROM "User" WHERE email LIKE '%admin%' OR id = (SELECT MIN(id) FROM "User") LIMIT 1;
    
    -- Si no hay usuario admin, usar el primer usuario disponible
    IF admin_user_id IS NULL THEN
        SELECT id INTO admin_user_id FROM "User" LIMIT 1;
    END IF;
    
    -- Obtener IDs de roles
    SELECT id INTO student_role_id FROM "Role" WHERE LOWER(nombre) LIKE '%estudiante%' OR LOWER(nombre) LIKE '%student%' LIMIT 1;
    SELECT id INTO pastor_role_id FROM "Role" WHERE LOWER(nombre) LIKE '%pastor%' OR LOWER(nombre) LIKE '%tutor%' LIMIT 1;
    SELECT id INTO teacher_role_id FROM "Role" WHERE LOWER(nombre) LIKE '%docente%' OR LOWER(nombre) LIKE '%teacher%' LIMIT 1;
    SELECT id INTO coordinator_role_id FROM "Role" WHERE LOWER(nombre) LIKE '%coordinador%' OR LOWER(nombre) LIKE '%coordinator%' LIMIT 1;
    SELECT id INTO dean_role_id FROM "Role" WHERE LOWER(nombre) LIKE '%decano%' OR LOWER(nombre) LIKE '%dean%' LIMIT 1;
    SELECT id INTO admin_role_id FROM "Role" WHERE LOWER(nombre) LIKE '%admin%' OR LOWER(nombre) LIKE '%administrador%' LIMIT 1;
    
    -- PERMISOS PARA ESTUDIANTE
    IF student_role_id IS NOT NULL THEN
        INSERT INTO "RolePermissionNew" ("roleId", "permissionId", "grantedBy")
        SELECT student_role_id, p.id, admin_user_id
        FROM "PermissionNew" p
        WHERE p.name IN (
            'practices.read',
            'evaluations.read',
            'evidences.create',
            'evidences.read',
            'evidences.update'
        )
        ON CONFLICT ("roleId", "permissionId") DO NOTHING;
    END IF;
    
    -- PERMISOS PARA PASTOR TUTOR
    IF pastor_role_id IS NOT NULL THEN
        INSERT INTO "RolePermissionNew" ("roleId", "permissionId", "grantedBy")
        SELECT pastor_role_id, p.id, admin_user_id
        FROM "PermissionNew" p
        WHERE p.name IN (
            'practices.read',
            'evaluations.create',
            'evaluations.read',
            'evaluations.update',
            'evidences.read',
            'evidences.approve',
            'reports.generate'
        )
        ON CONFLICT ("roleId", "permissionId") DO NOTHING;
    END IF;
    
    -- PERMISOS PARA DOCENTE
    IF teacher_role_id IS NOT NULL THEN
        INSERT INTO "RolePermissionNew" ("roleId", "permissionId", "grantedBy")
        SELECT teacher_role_id, p.id, admin_user_id
        FROM "PermissionNew" p
        WHERE p.name IN (
            'practices.read',
            'practices.update',
            'evaluations.create',
            'evaluations.read',
            'evaluations.update',
            'evaluations.approve',
            'evidences.read',
            'evidences.approve',
            'reports.generate',
            'reports.export'
        )
        ON CONFLICT ("roleId", "permissionId") DO NOTHING;
    END IF;
    
    -- PERMISOS PARA COORDINADOR
    IF coordinator_role_id IS NOT NULL THEN
        INSERT INTO "RolePermissionNew" ("roleId", "permissionId", "grantedBy")
        SELECT coordinator_role_id, p.id, admin_user_id
        FROM "PermissionNew" p
        WHERE p.name IN (
            'users.create',
            'users.read',
            'users.update',
            'centers.read',
            'practices.create',
            'practices.read',
            'practices.update',
            'practices.assign',
            'practices.transfer',
            'evaluations.read',
            'evaluations.approve',
            'evidences.read',
            'evidences.approve',
            'reports.generate',
            'reports.export'
        )
        ON CONFLICT ("roleId", "permissionId") DO NOTHING;
    END IF;
    
    -- PERMISOS PARA DECANO
    IF dean_role_id IS NOT NULL THEN
        INSERT INTO "RolePermissionNew" ("roleId", "permissionId", "grantedBy")
        SELECT dean_role_id, p.id, admin_user_id
        FROM "PermissionNew" p
        WHERE p.name IN (
            'users.read',
            'users.update',
            'users.manage_roles',
            'centers.read',
            'practices.read',
            'practices.assign',
            'practices.transfer',
            'evaluations.read',
            'evaluations.approve',
            'evidences.read',
            'evidences.approve',
            'reports.generate',
            'reports.export',
            'audit.read'
        )
        ON CONFLICT ("roleId", "permissionId") DO NOTHING;
    END IF;
    
    -- PERMISOS PARA ADMINISTRADOR (TODOS)
    IF admin_role_id IS NOT NULL THEN
        INSERT INTO "RolePermissionNew" ("roleId", "permissionId", "grantedBy")
        SELECT admin_role_id, p.id, admin_user_id
        FROM "PermissionNew" p
        ON CONFLICT ("roleId", "permissionId") DO NOTHING;
    END IF;
    
END $$;

\echo '‚úÖ Permisos asignados a roles'
\echo ''

-- =====================================================
-- 4. CREAR FUNCI√ìN DE VALIDACI√ìN DE PERMISOS
-- =====================================================

\echo 'üîß 4. Creando funci√≥n de validaci√≥n de permisos...'

CREATE OR REPLACE FUNCTION check_user_permission(
    p_user_id TEXT,
    p_permission_name TEXT
) RETURNS BOOLEAN AS $$
DECLARE
    has_permission BOOLEAN := FALSE;
BEGIN
    -- Verificar si el usuario tiene el permiso a trav√©s de sus roles activos
    SELECT EXISTS(
        SELECT 1
        FROM "UserRole" ur
        JOIN "RolePermissionNew" rp ON ur."roleId" = rp."roleId"
        JOIN "PermissionNew" p ON rp."permissionId" = p.id
        WHERE ur."userId" = p_user_id
            AND ur.estado = 'ACTIVO'
            AND p.name = p_permission_name
    ) INTO has_permission;
    
    RETURN has_permission;
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

\echo '‚úÖ Funci√≥n de validaci√≥n de permisos creada'
\echo ''

-- =====================================================
-- 5. CREAR FUNCI√ìN DE LOGGING DE SEGURIDAD
-- =====================================================

\echo 'üìù 5. Creando funci√≥n de logging de seguridad...'

CREATE OR REPLACE FUNCTION log_security_event(
    p_user_id TEXT,
    p_action TEXT,
    p_resource TEXT DEFAULT NULL,
    p_resource_id TEXT DEFAULT NULL,
    p_ip_address TEXT DEFAULT NULL,
    p_user_agent TEXT DEFAULT NULL,
    p_success BOOLEAN DEFAULT TRUE,
    p_error_message TEXT DEFAULT NULL,
    p_metadata JSONB DEFAULT NULL
) RETURNS VOID AS $$
BEGIN
    INSERT INTO "SecurityLog" (
        "userId",
        action,
        resource,
        "resourceId",
        "ipAddress",
        "userAgent",
        success,
        "errorMessage",
        metadata
    ) VALUES (
        p_user_id,
        p_action,
        p_resource,
        p_resource_id,
        p_ip_address,
        p_user_agent,
        p_success,
        p_error_message,
        p_metadata
    );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

\echo '‚úÖ Funci√≥n de logging de seguridad creada'
\echo ''

-- =====================================================
-- 6. VERIFICACI√ìN DE POBLACI√ìN
-- =====================================================

\echo 'üîç 6. Verificando poblaci√≥n de datos...'

-- Verificar t√©rminos
SELECT 'T√©rminos creados' as tabla, COUNT(*) as registros FROM "Term";

-- Verificar permisos
SELECT 'Permisos creados' as tabla, COUNT(*) as registros FROM "PermissionNew";

-- Verificar asignaciones de permisos
SELECT 'Asignaciones de permisos' as tabla, COUNT(*) as registros FROM "RolePermissionNew";

-- Verificar permisos por rol
SELECT 
    r.nombre as rol,
    COUNT(rp.id) as permisos_asignados
FROM "Role" r
LEFT JOIN "RolePermissionNew" rp ON r.id = rp."roleId"
GROUP BY r.id, r.nombre
ORDER BY r.nombre;

\echo ''
\echo '‚úÖ FASE 2 COMPLETADA EXITOSAMENTE'
\echo 'üîê RBAC operacional configurado'
\echo 'üìÖ T√©rminos acad√©micos disponibles'
\echo 'üîÑ Listo para Fase 3: Triggers y validaciones'
\echo ''