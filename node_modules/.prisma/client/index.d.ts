
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Practice
 * 
 */
export type Practice = $Result.DefaultSelection<Prisma.$PracticePayload>
/**
 * Model PracticeReport
 * 
 */
export type PracticeReport = $Result.DefaultSelection<Prisma.$PracticeReportPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  STUDENT: 'STUDENT',
  TUTOR: 'TUTOR',
  PRACTICE_TEACHER: 'PRACTICE_TEACHER',
  COORDINATOR: 'COORDINATOR',
  DEAN: 'DEAN',
  TECHNICAL_ADMIN: 'TECHNICAL_ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]


export const PracticeStatus: {
  PENDING: 'PENDING',
  APPROVED: 'APPROVED',
  REJECTED: 'REJECTED',
  IN_PROGRESS: 'IN_PROGRESS',
  COMPLETED: 'COMPLETED'
};

export type PracticeStatus = (typeof PracticeStatus)[keyof typeof PracticeStatus]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

export type PracticeStatus = $Enums.PracticeStatus

export const PracticeStatus: typeof $Enums.PracticeStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.practice`: Exposes CRUD operations for the **Practice** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Practices
    * const practices = await prisma.practice.findMany()
    * ```
    */
  get practice(): Prisma.PracticeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.practiceReport`: Exposes CRUD operations for the **PracticeReport** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PracticeReports
    * const practiceReports = await prisma.practiceReport.findMany()
    * ```
    */
  get practiceReport(): Prisma.PracticeReportDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.12.0
   * Query Engine version: 8047c96bbd92db98a2abc7c9323ce77c02c89dbc
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Practice: 'Practice',
    PracticeReport: 'PracticeReport'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "practice" | "practiceReport"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Practice: {
        payload: Prisma.$PracticePayload<ExtArgs>
        fields: Prisma.PracticeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PracticeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PracticeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload>
          }
          findFirst: {
            args: Prisma.PracticeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PracticeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload>
          }
          findMany: {
            args: Prisma.PracticeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload>[]
          }
          create: {
            args: Prisma.PracticeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload>
          }
          createMany: {
            args: Prisma.PracticeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PracticeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload>[]
          }
          delete: {
            args: Prisma.PracticeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload>
          }
          update: {
            args: Prisma.PracticeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload>
          }
          deleteMany: {
            args: Prisma.PracticeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PracticeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PracticeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload>[]
          }
          upsert: {
            args: Prisma.PracticeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticePayload>
          }
          aggregate: {
            args: Prisma.PracticeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePractice>
          }
          groupBy: {
            args: Prisma.PracticeGroupByArgs<ExtArgs>
            result: $Utils.Optional<PracticeGroupByOutputType>[]
          }
          count: {
            args: Prisma.PracticeCountArgs<ExtArgs>
            result: $Utils.Optional<PracticeCountAggregateOutputType> | number
          }
        }
      }
      PracticeReport: {
        payload: Prisma.$PracticeReportPayload<ExtArgs>
        fields: Prisma.PracticeReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PracticeReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PracticeReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeReportPayload>
          }
          findFirst: {
            args: Prisma.PracticeReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PracticeReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeReportPayload>
          }
          findMany: {
            args: Prisma.PracticeReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeReportPayload>[]
          }
          create: {
            args: Prisma.PracticeReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeReportPayload>
          }
          createMany: {
            args: Prisma.PracticeReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PracticeReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeReportPayload>[]
          }
          delete: {
            args: Prisma.PracticeReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeReportPayload>
          }
          update: {
            args: Prisma.PracticeReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeReportPayload>
          }
          deleteMany: {
            args: Prisma.PracticeReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PracticeReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PracticeReportUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeReportPayload>[]
          }
          upsert: {
            args: Prisma.PracticeReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PracticeReportPayload>
          }
          aggregate: {
            args: Prisma.PracticeReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePracticeReport>
          }
          groupBy: {
            args: Prisma.PracticeReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<PracticeReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.PracticeReportCountArgs<ExtArgs>
            result: $Utils.Optional<PracticeReportCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    practice?: PracticeOmit
    practiceReport?: PracticeReportOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    practicesAsStudent: number
    practicesAsTutor: number
    practicesAsTeacher: number
    reports: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    practicesAsStudent?: boolean | UserCountOutputTypeCountPracticesAsStudentArgs
    practicesAsTutor?: boolean | UserCountOutputTypeCountPracticesAsTutorArgs
    practicesAsTeacher?: boolean | UserCountOutputTypeCountPracticesAsTeacherArgs
    reports?: boolean | UserCountOutputTypeCountReportsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPracticesAsStudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PracticeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPracticesAsTutorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PracticeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPracticesAsTeacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PracticeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PracticeReportWhereInput
  }


  /**
   * Count Type PracticeCountOutputType
   */

  export type PracticeCountOutputType = {
    reports: number
  }

  export type PracticeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    reports?: boolean | PracticeCountOutputTypeCountReportsArgs
  }

  // Custom InputTypes
  /**
   * PracticeCountOutputType without action
   */
  export type PracticeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeCountOutputType
     */
    select?: PracticeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PracticeCountOutputType without action
   */
  export type PracticeCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PracticeReportWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    role: $Enums.Role | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    role: $Enums.Role | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    role: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    role?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    role?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string
    role: $Enums.Role
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    practicesAsStudent?: boolean | User$practicesAsStudentArgs<ExtArgs>
    practicesAsTutor?: boolean | User$practicesAsTutorArgs<ExtArgs>
    practicesAsTeacher?: boolean | User$practicesAsTeacherArgs<ExtArgs>
    reports?: boolean | User$reportsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    role?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "role" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    practicesAsStudent?: boolean | User$practicesAsStudentArgs<ExtArgs>
    practicesAsTutor?: boolean | User$practicesAsTutorArgs<ExtArgs>
    practicesAsTeacher?: boolean | User$practicesAsTeacherArgs<ExtArgs>
    reports?: boolean | User$reportsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      practicesAsStudent: Prisma.$PracticePayload<ExtArgs>[]
      practicesAsTutor: Prisma.$PracticePayload<ExtArgs>[]
      practicesAsTeacher: Prisma.$PracticePayload<ExtArgs>[]
      reports: Prisma.$PracticeReportPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string
      role: $Enums.Role
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    practicesAsStudent<T extends User$practicesAsStudentArgs<ExtArgs> = {}>(args?: Subset<T, User$practicesAsStudentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    practicesAsTutor<T extends User$practicesAsTutorArgs<ExtArgs> = {}>(args?: Subset<T, User$practicesAsTutorArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    practicesAsTeacher<T extends User$practicesAsTeacherArgs<ExtArgs> = {}>(args?: Subset<T, User$practicesAsTeacherArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    reports<T extends User$reportsArgs<ExtArgs> = {}>(args?: Subset<T, User$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticeReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly role: FieldRef<"User", 'Role'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.practicesAsStudent
   */
  export type User$practicesAsStudentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    where?: PracticeWhereInput
    orderBy?: PracticeOrderByWithRelationInput | PracticeOrderByWithRelationInput[]
    cursor?: PracticeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PracticeScalarFieldEnum | PracticeScalarFieldEnum[]
  }

  /**
   * User.practicesAsTutor
   */
  export type User$practicesAsTutorArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    where?: PracticeWhereInput
    orderBy?: PracticeOrderByWithRelationInput | PracticeOrderByWithRelationInput[]
    cursor?: PracticeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PracticeScalarFieldEnum | PracticeScalarFieldEnum[]
  }

  /**
   * User.practicesAsTeacher
   */
  export type User$practicesAsTeacherArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    where?: PracticeWhereInput
    orderBy?: PracticeOrderByWithRelationInput | PracticeOrderByWithRelationInput[]
    cursor?: PracticeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PracticeScalarFieldEnum | PracticeScalarFieldEnum[]
  }

  /**
   * User.reports
   */
  export type User$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeReport
     */
    select?: PracticeReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeReport
     */
    omit?: PracticeReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeReportInclude<ExtArgs> | null
    where?: PracticeReportWhereInput
    orderBy?: PracticeReportOrderByWithRelationInput | PracticeReportOrderByWithRelationInput[]
    cursor?: PracticeReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PracticeReportScalarFieldEnum | PracticeReportScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Practice
   */

  export type AggregatePractice = {
    _count: PracticeCountAggregateOutputType | null
    _avg: PracticeAvgAggregateOutputType | null
    _sum: PracticeSumAggregateOutputType | null
    _min: PracticeMinAggregateOutputType | null
    _max: PracticeMaxAggregateOutputType | null
  }

  export type PracticeAvgAggregateOutputType = {
    hours: number | null
  }

  export type PracticeSumAggregateOutputType = {
    hours: number | null
  }

  export type PracticeMinAggregateOutputType = {
    id: string | null
    studentId: string | null
    tutorId: string | null
    teacherId: string | null
    institution: string | null
    startDate: Date | null
    endDate: Date | null
    status: $Enums.PracticeStatus | null
    hours: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PracticeMaxAggregateOutputType = {
    id: string | null
    studentId: string | null
    tutorId: string | null
    teacherId: string | null
    institution: string | null
    startDate: Date | null
    endDate: Date | null
    status: $Enums.PracticeStatus | null
    hours: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type PracticeCountAggregateOutputType = {
    id: number
    studentId: number
    tutorId: number
    teacherId: number
    institution: number
    startDate: number
    endDate: number
    status: number
    hours: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type PracticeAvgAggregateInputType = {
    hours?: true
  }

  export type PracticeSumAggregateInputType = {
    hours?: true
  }

  export type PracticeMinAggregateInputType = {
    id?: true
    studentId?: true
    tutorId?: true
    teacherId?: true
    institution?: true
    startDate?: true
    endDate?: true
    status?: true
    hours?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PracticeMaxAggregateInputType = {
    id?: true
    studentId?: true
    tutorId?: true
    teacherId?: true
    institution?: true
    startDate?: true
    endDate?: true
    status?: true
    hours?: true
    createdAt?: true
    updatedAt?: true
  }

  export type PracticeCountAggregateInputType = {
    id?: true
    studentId?: true
    tutorId?: true
    teacherId?: true
    institution?: true
    startDate?: true
    endDate?: true
    status?: true
    hours?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type PracticeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Practice to aggregate.
     */
    where?: PracticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Practices to fetch.
     */
    orderBy?: PracticeOrderByWithRelationInput | PracticeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PracticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Practices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Practices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Practices
    **/
    _count?: true | PracticeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PracticeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PracticeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PracticeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PracticeMaxAggregateInputType
  }

  export type GetPracticeAggregateType<T extends PracticeAggregateArgs> = {
        [P in keyof T & keyof AggregatePractice]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePractice[P]>
      : GetScalarType<T[P], AggregatePractice[P]>
  }




  export type PracticeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PracticeWhereInput
    orderBy?: PracticeOrderByWithAggregationInput | PracticeOrderByWithAggregationInput[]
    by: PracticeScalarFieldEnum[] | PracticeScalarFieldEnum
    having?: PracticeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PracticeCountAggregateInputType | true
    _avg?: PracticeAvgAggregateInputType
    _sum?: PracticeSumAggregateInputType
    _min?: PracticeMinAggregateInputType
    _max?: PracticeMaxAggregateInputType
  }

  export type PracticeGroupByOutputType = {
    id: string
    studentId: string
    tutorId: string
    teacherId: string
    institution: string
    startDate: Date
    endDate: Date
    status: $Enums.PracticeStatus
    hours: number
    createdAt: Date
    updatedAt: Date
    _count: PracticeCountAggregateOutputType | null
    _avg: PracticeAvgAggregateOutputType | null
    _sum: PracticeSumAggregateOutputType | null
    _min: PracticeMinAggregateOutputType | null
    _max: PracticeMaxAggregateOutputType | null
  }

  type GetPracticeGroupByPayload<T extends PracticeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PracticeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PracticeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PracticeGroupByOutputType[P]>
            : GetScalarType<T[P], PracticeGroupByOutputType[P]>
        }
      >
    >


  export type PracticeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    tutorId?: boolean
    teacherId?: boolean
    institution?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    hours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
    tutor?: boolean | UserDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
    reports?: boolean | Practice$reportsArgs<ExtArgs>
    _count?: boolean | PracticeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["practice"]>

  export type PracticeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    tutorId?: boolean
    teacherId?: boolean
    institution?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    hours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
    tutor?: boolean | UserDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["practice"]>

  export type PracticeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    studentId?: boolean
    tutorId?: boolean
    teacherId?: boolean
    institution?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    hours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    student?: boolean | UserDefaultArgs<ExtArgs>
    tutor?: boolean | UserDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["practice"]>

  export type PracticeSelectScalar = {
    id?: boolean
    studentId?: boolean
    tutorId?: boolean
    teacherId?: boolean
    institution?: boolean
    startDate?: boolean
    endDate?: boolean
    status?: boolean
    hours?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type PracticeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "studentId" | "tutorId" | "teacherId" | "institution" | "startDate" | "endDate" | "status" | "hours" | "createdAt" | "updatedAt", ExtArgs["result"]["practice"]>
  export type PracticeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
    tutor?: boolean | UserDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
    reports?: boolean | Practice$reportsArgs<ExtArgs>
    _count?: boolean | PracticeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PracticeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
    tutor?: boolean | UserDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PracticeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    student?: boolean | UserDefaultArgs<ExtArgs>
    tutor?: boolean | UserDefaultArgs<ExtArgs>
    teacher?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PracticePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Practice"
    objects: {
      student: Prisma.$UserPayload<ExtArgs>
      tutor: Prisma.$UserPayload<ExtArgs>
      teacher: Prisma.$UserPayload<ExtArgs>
      reports: Prisma.$PracticeReportPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      studentId: string
      tutorId: string
      teacherId: string
      institution: string
      startDate: Date
      endDate: Date
      status: $Enums.PracticeStatus
      hours: number
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["practice"]>
    composites: {}
  }

  type PracticeGetPayload<S extends boolean | null | undefined | PracticeDefaultArgs> = $Result.GetResult<Prisma.$PracticePayload, S>

  type PracticeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PracticeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PracticeCountAggregateInputType | true
    }

  export interface PracticeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Practice'], meta: { name: 'Practice' } }
    /**
     * Find zero or one Practice that matches the filter.
     * @param {PracticeFindUniqueArgs} args - Arguments to find a Practice
     * @example
     * // Get one Practice
     * const practice = await prisma.practice.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PracticeFindUniqueArgs>(args: SelectSubset<T, PracticeFindUniqueArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Practice that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PracticeFindUniqueOrThrowArgs} args - Arguments to find a Practice
     * @example
     * // Get one Practice
     * const practice = await prisma.practice.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PracticeFindUniqueOrThrowArgs>(args: SelectSubset<T, PracticeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Practice that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeFindFirstArgs} args - Arguments to find a Practice
     * @example
     * // Get one Practice
     * const practice = await prisma.practice.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PracticeFindFirstArgs>(args?: SelectSubset<T, PracticeFindFirstArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Practice that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeFindFirstOrThrowArgs} args - Arguments to find a Practice
     * @example
     * // Get one Practice
     * const practice = await prisma.practice.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PracticeFindFirstOrThrowArgs>(args?: SelectSubset<T, PracticeFindFirstOrThrowArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Practices that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Practices
     * const practices = await prisma.practice.findMany()
     * 
     * // Get first 10 Practices
     * const practices = await prisma.practice.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const practiceWithIdOnly = await prisma.practice.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PracticeFindManyArgs>(args?: SelectSubset<T, PracticeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Practice.
     * @param {PracticeCreateArgs} args - Arguments to create a Practice.
     * @example
     * // Create one Practice
     * const Practice = await prisma.practice.create({
     *   data: {
     *     // ... data to create a Practice
     *   }
     * })
     * 
     */
    create<T extends PracticeCreateArgs>(args: SelectSubset<T, PracticeCreateArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Practices.
     * @param {PracticeCreateManyArgs} args - Arguments to create many Practices.
     * @example
     * // Create many Practices
     * const practice = await prisma.practice.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PracticeCreateManyArgs>(args?: SelectSubset<T, PracticeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Practices and returns the data saved in the database.
     * @param {PracticeCreateManyAndReturnArgs} args - Arguments to create many Practices.
     * @example
     * // Create many Practices
     * const practice = await prisma.practice.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Practices and only return the `id`
     * const practiceWithIdOnly = await prisma.practice.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PracticeCreateManyAndReturnArgs>(args?: SelectSubset<T, PracticeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Practice.
     * @param {PracticeDeleteArgs} args - Arguments to delete one Practice.
     * @example
     * // Delete one Practice
     * const Practice = await prisma.practice.delete({
     *   where: {
     *     // ... filter to delete one Practice
     *   }
     * })
     * 
     */
    delete<T extends PracticeDeleteArgs>(args: SelectSubset<T, PracticeDeleteArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Practice.
     * @param {PracticeUpdateArgs} args - Arguments to update one Practice.
     * @example
     * // Update one Practice
     * const practice = await prisma.practice.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PracticeUpdateArgs>(args: SelectSubset<T, PracticeUpdateArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Practices.
     * @param {PracticeDeleteManyArgs} args - Arguments to filter Practices to delete.
     * @example
     * // Delete a few Practices
     * const { count } = await prisma.practice.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PracticeDeleteManyArgs>(args?: SelectSubset<T, PracticeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Practices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Practices
     * const practice = await prisma.practice.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PracticeUpdateManyArgs>(args: SelectSubset<T, PracticeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Practices and returns the data updated in the database.
     * @param {PracticeUpdateManyAndReturnArgs} args - Arguments to update many Practices.
     * @example
     * // Update many Practices
     * const practice = await prisma.practice.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Practices and only return the `id`
     * const practiceWithIdOnly = await prisma.practice.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PracticeUpdateManyAndReturnArgs>(args: SelectSubset<T, PracticeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Practice.
     * @param {PracticeUpsertArgs} args - Arguments to update or create a Practice.
     * @example
     * // Update or create a Practice
     * const practice = await prisma.practice.upsert({
     *   create: {
     *     // ... data to create a Practice
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Practice we want to update
     *   }
     * })
     */
    upsert<T extends PracticeUpsertArgs>(args: SelectSubset<T, PracticeUpsertArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Practices.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeCountArgs} args - Arguments to filter Practices to count.
     * @example
     * // Count the number of Practices
     * const count = await prisma.practice.count({
     *   where: {
     *     // ... the filter for the Practices we want to count
     *   }
     * })
    **/
    count<T extends PracticeCountArgs>(
      args?: Subset<T, PracticeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PracticeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Practice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PracticeAggregateArgs>(args: Subset<T, PracticeAggregateArgs>): Prisma.PrismaPromise<GetPracticeAggregateType<T>>

    /**
     * Group by Practice.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PracticeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PracticeGroupByArgs['orderBy'] }
        : { orderBy?: PracticeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PracticeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPracticeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Practice model
   */
  readonly fields: PracticeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Practice.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PracticeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    student<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    tutor<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    teacher<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    reports<T extends Practice$reportsArgs<ExtArgs> = {}>(args?: Subset<T, Practice$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticeReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Practice model
   */
  interface PracticeFieldRefs {
    readonly id: FieldRef<"Practice", 'String'>
    readonly studentId: FieldRef<"Practice", 'String'>
    readonly tutorId: FieldRef<"Practice", 'String'>
    readonly teacherId: FieldRef<"Practice", 'String'>
    readonly institution: FieldRef<"Practice", 'String'>
    readonly startDate: FieldRef<"Practice", 'DateTime'>
    readonly endDate: FieldRef<"Practice", 'DateTime'>
    readonly status: FieldRef<"Practice", 'PracticeStatus'>
    readonly hours: FieldRef<"Practice", 'Int'>
    readonly createdAt: FieldRef<"Practice", 'DateTime'>
    readonly updatedAt: FieldRef<"Practice", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Practice findUnique
   */
  export type PracticeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    /**
     * Filter, which Practice to fetch.
     */
    where: PracticeWhereUniqueInput
  }

  /**
   * Practice findUniqueOrThrow
   */
  export type PracticeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    /**
     * Filter, which Practice to fetch.
     */
    where: PracticeWhereUniqueInput
  }

  /**
   * Practice findFirst
   */
  export type PracticeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    /**
     * Filter, which Practice to fetch.
     */
    where?: PracticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Practices to fetch.
     */
    orderBy?: PracticeOrderByWithRelationInput | PracticeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Practices.
     */
    cursor?: PracticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Practices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Practices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Practices.
     */
    distinct?: PracticeScalarFieldEnum | PracticeScalarFieldEnum[]
  }

  /**
   * Practice findFirstOrThrow
   */
  export type PracticeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    /**
     * Filter, which Practice to fetch.
     */
    where?: PracticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Practices to fetch.
     */
    orderBy?: PracticeOrderByWithRelationInput | PracticeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Practices.
     */
    cursor?: PracticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Practices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Practices.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Practices.
     */
    distinct?: PracticeScalarFieldEnum | PracticeScalarFieldEnum[]
  }

  /**
   * Practice findMany
   */
  export type PracticeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    /**
     * Filter, which Practices to fetch.
     */
    where?: PracticeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Practices to fetch.
     */
    orderBy?: PracticeOrderByWithRelationInput | PracticeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Practices.
     */
    cursor?: PracticeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Practices from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Practices.
     */
    skip?: number
    distinct?: PracticeScalarFieldEnum | PracticeScalarFieldEnum[]
  }

  /**
   * Practice create
   */
  export type PracticeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    /**
     * The data needed to create a Practice.
     */
    data: XOR<PracticeCreateInput, PracticeUncheckedCreateInput>
  }

  /**
   * Practice createMany
   */
  export type PracticeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Practices.
     */
    data: PracticeCreateManyInput | PracticeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Practice createManyAndReturn
   */
  export type PracticeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * The data used to create many Practices.
     */
    data: PracticeCreateManyInput | PracticeCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Practice update
   */
  export type PracticeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    /**
     * The data needed to update a Practice.
     */
    data: XOR<PracticeUpdateInput, PracticeUncheckedUpdateInput>
    /**
     * Choose, which Practice to update.
     */
    where: PracticeWhereUniqueInput
  }

  /**
   * Practice updateMany
   */
  export type PracticeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Practices.
     */
    data: XOR<PracticeUpdateManyMutationInput, PracticeUncheckedUpdateManyInput>
    /**
     * Filter which Practices to update
     */
    where?: PracticeWhereInput
    /**
     * Limit how many Practices to update.
     */
    limit?: number
  }

  /**
   * Practice updateManyAndReturn
   */
  export type PracticeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * The data used to update Practices.
     */
    data: XOR<PracticeUpdateManyMutationInput, PracticeUncheckedUpdateManyInput>
    /**
     * Filter which Practices to update
     */
    where?: PracticeWhereInput
    /**
     * Limit how many Practices to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Practice upsert
   */
  export type PracticeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    /**
     * The filter to search for the Practice to update in case it exists.
     */
    where: PracticeWhereUniqueInput
    /**
     * In case the Practice found by the `where` argument doesn't exist, create a new Practice with this data.
     */
    create: XOR<PracticeCreateInput, PracticeUncheckedCreateInput>
    /**
     * In case the Practice was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PracticeUpdateInput, PracticeUncheckedUpdateInput>
  }

  /**
   * Practice delete
   */
  export type PracticeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
    /**
     * Filter which Practice to delete.
     */
    where: PracticeWhereUniqueInput
  }

  /**
   * Practice deleteMany
   */
  export type PracticeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Practices to delete
     */
    where?: PracticeWhereInput
    /**
     * Limit how many Practices to delete.
     */
    limit?: number
  }

  /**
   * Practice.reports
   */
  export type Practice$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeReport
     */
    select?: PracticeReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeReport
     */
    omit?: PracticeReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeReportInclude<ExtArgs> | null
    where?: PracticeReportWhereInput
    orderBy?: PracticeReportOrderByWithRelationInput | PracticeReportOrderByWithRelationInput[]
    cursor?: PracticeReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PracticeReportScalarFieldEnum | PracticeReportScalarFieldEnum[]
  }

  /**
   * Practice without action
   */
  export type PracticeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Practice
     */
    select?: PracticeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Practice
     */
    omit?: PracticeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeInclude<ExtArgs> | null
  }


  /**
   * Model PracticeReport
   */

  export type AggregatePracticeReport = {
    _count: PracticeReportCountAggregateOutputType | null
    _avg: PracticeReportAvgAggregateOutputType | null
    _sum: PracticeReportSumAggregateOutputType | null
    _min: PracticeReportMinAggregateOutputType | null
    _max: PracticeReportMaxAggregateOutputType | null
  }

  export type PracticeReportAvgAggregateOutputType = {
    hours: number | null
  }

  export type PracticeReportSumAggregateOutputType = {
    hours: number | null
  }

  export type PracticeReportMinAggregateOutputType = {
    id: string | null
    practiceId: string | null
    userId: string | null
    date: Date | null
    activities: string | null
    hours: number | null
    observations: string | null
  }

  export type PracticeReportMaxAggregateOutputType = {
    id: string | null
    practiceId: string | null
    userId: string | null
    date: Date | null
    activities: string | null
    hours: number | null
    observations: string | null
  }

  export type PracticeReportCountAggregateOutputType = {
    id: number
    practiceId: number
    userId: number
    date: number
    activities: number
    hours: number
    observations: number
    _all: number
  }


  export type PracticeReportAvgAggregateInputType = {
    hours?: true
  }

  export type PracticeReportSumAggregateInputType = {
    hours?: true
  }

  export type PracticeReportMinAggregateInputType = {
    id?: true
    practiceId?: true
    userId?: true
    date?: true
    activities?: true
    hours?: true
    observations?: true
  }

  export type PracticeReportMaxAggregateInputType = {
    id?: true
    practiceId?: true
    userId?: true
    date?: true
    activities?: true
    hours?: true
    observations?: true
  }

  export type PracticeReportCountAggregateInputType = {
    id?: true
    practiceId?: true
    userId?: true
    date?: true
    activities?: true
    hours?: true
    observations?: true
    _all?: true
  }

  export type PracticeReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PracticeReport to aggregate.
     */
    where?: PracticeReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PracticeReports to fetch.
     */
    orderBy?: PracticeReportOrderByWithRelationInput | PracticeReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PracticeReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PracticeReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PracticeReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PracticeReports
    **/
    _count?: true | PracticeReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: PracticeReportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: PracticeReportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PracticeReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PracticeReportMaxAggregateInputType
  }

  export type GetPracticeReportAggregateType<T extends PracticeReportAggregateArgs> = {
        [P in keyof T & keyof AggregatePracticeReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePracticeReport[P]>
      : GetScalarType<T[P], AggregatePracticeReport[P]>
  }




  export type PracticeReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PracticeReportWhereInput
    orderBy?: PracticeReportOrderByWithAggregationInput | PracticeReportOrderByWithAggregationInput[]
    by: PracticeReportScalarFieldEnum[] | PracticeReportScalarFieldEnum
    having?: PracticeReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PracticeReportCountAggregateInputType | true
    _avg?: PracticeReportAvgAggregateInputType
    _sum?: PracticeReportSumAggregateInputType
    _min?: PracticeReportMinAggregateInputType
    _max?: PracticeReportMaxAggregateInputType
  }

  export type PracticeReportGroupByOutputType = {
    id: string
    practiceId: string
    userId: string
    date: Date
    activities: string
    hours: number
    observations: string
    _count: PracticeReportCountAggregateOutputType | null
    _avg: PracticeReportAvgAggregateOutputType | null
    _sum: PracticeReportSumAggregateOutputType | null
    _min: PracticeReportMinAggregateOutputType | null
    _max: PracticeReportMaxAggregateOutputType | null
  }

  type GetPracticeReportGroupByPayload<T extends PracticeReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PracticeReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PracticeReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PracticeReportGroupByOutputType[P]>
            : GetScalarType<T[P], PracticeReportGroupByOutputType[P]>
        }
      >
    >


  export type PracticeReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    practiceId?: boolean
    userId?: boolean
    date?: boolean
    activities?: boolean
    hours?: boolean
    observations?: boolean
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["practiceReport"]>

  export type PracticeReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    practiceId?: boolean
    userId?: boolean
    date?: boolean
    activities?: boolean
    hours?: boolean
    observations?: boolean
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["practiceReport"]>

  export type PracticeReportSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    practiceId?: boolean
    userId?: boolean
    date?: boolean
    activities?: boolean
    hours?: boolean
    observations?: boolean
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["practiceReport"]>

  export type PracticeReportSelectScalar = {
    id?: boolean
    practiceId?: boolean
    userId?: boolean
    date?: boolean
    activities?: boolean
    hours?: boolean
    observations?: boolean
  }

  export type PracticeReportOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "practiceId" | "userId" | "date" | "activities" | "hours" | "observations", ExtArgs["result"]["practiceReport"]>
  export type PracticeReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PracticeReportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type PracticeReportIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    practice?: boolean | PracticeDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $PracticeReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PracticeReport"
    objects: {
      practice: Prisma.$PracticePayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      practiceId: string
      userId: string
      date: Date
      activities: string
      hours: number
      observations: string
    }, ExtArgs["result"]["practiceReport"]>
    composites: {}
  }

  type PracticeReportGetPayload<S extends boolean | null | undefined | PracticeReportDefaultArgs> = $Result.GetResult<Prisma.$PracticeReportPayload, S>

  type PracticeReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PracticeReportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PracticeReportCountAggregateInputType | true
    }

  export interface PracticeReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PracticeReport'], meta: { name: 'PracticeReport' } }
    /**
     * Find zero or one PracticeReport that matches the filter.
     * @param {PracticeReportFindUniqueArgs} args - Arguments to find a PracticeReport
     * @example
     * // Get one PracticeReport
     * const practiceReport = await prisma.practiceReport.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PracticeReportFindUniqueArgs>(args: SelectSubset<T, PracticeReportFindUniqueArgs<ExtArgs>>): Prisma__PracticeReportClient<$Result.GetResult<Prisma.$PracticeReportPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one PracticeReport that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PracticeReportFindUniqueOrThrowArgs} args - Arguments to find a PracticeReport
     * @example
     * // Get one PracticeReport
     * const practiceReport = await prisma.practiceReport.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PracticeReportFindUniqueOrThrowArgs>(args: SelectSubset<T, PracticeReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PracticeReportClient<$Result.GetResult<Prisma.$PracticeReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PracticeReport that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeReportFindFirstArgs} args - Arguments to find a PracticeReport
     * @example
     * // Get one PracticeReport
     * const practiceReport = await prisma.practiceReport.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PracticeReportFindFirstArgs>(args?: SelectSubset<T, PracticeReportFindFirstArgs<ExtArgs>>): Prisma__PracticeReportClient<$Result.GetResult<Prisma.$PracticeReportPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first PracticeReport that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeReportFindFirstOrThrowArgs} args - Arguments to find a PracticeReport
     * @example
     * // Get one PracticeReport
     * const practiceReport = await prisma.practiceReport.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PracticeReportFindFirstOrThrowArgs>(args?: SelectSubset<T, PracticeReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__PracticeReportClient<$Result.GetResult<Prisma.$PracticeReportPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more PracticeReports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PracticeReports
     * const practiceReports = await prisma.practiceReport.findMany()
     * 
     * // Get first 10 PracticeReports
     * const practiceReports = await prisma.practiceReport.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const practiceReportWithIdOnly = await prisma.practiceReport.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PracticeReportFindManyArgs>(args?: SelectSubset<T, PracticeReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticeReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a PracticeReport.
     * @param {PracticeReportCreateArgs} args - Arguments to create a PracticeReport.
     * @example
     * // Create one PracticeReport
     * const PracticeReport = await prisma.practiceReport.create({
     *   data: {
     *     // ... data to create a PracticeReport
     *   }
     * })
     * 
     */
    create<T extends PracticeReportCreateArgs>(args: SelectSubset<T, PracticeReportCreateArgs<ExtArgs>>): Prisma__PracticeReportClient<$Result.GetResult<Prisma.$PracticeReportPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many PracticeReports.
     * @param {PracticeReportCreateManyArgs} args - Arguments to create many PracticeReports.
     * @example
     * // Create many PracticeReports
     * const practiceReport = await prisma.practiceReport.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PracticeReportCreateManyArgs>(args?: SelectSubset<T, PracticeReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many PracticeReports and returns the data saved in the database.
     * @param {PracticeReportCreateManyAndReturnArgs} args - Arguments to create many PracticeReports.
     * @example
     * // Create many PracticeReports
     * const practiceReport = await prisma.practiceReport.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many PracticeReports and only return the `id`
     * const practiceReportWithIdOnly = await prisma.practiceReport.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PracticeReportCreateManyAndReturnArgs>(args?: SelectSubset<T, PracticeReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticeReportPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a PracticeReport.
     * @param {PracticeReportDeleteArgs} args - Arguments to delete one PracticeReport.
     * @example
     * // Delete one PracticeReport
     * const PracticeReport = await prisma.practiceReport.delete({
     *   where: {
     *     // ... filter to delete one PracticeReport
     *   }
     * })
     * 
     */
    delete<T extends PracticeReportDeleteArgs>(args: SelectSubset<T, PracticeReportDeleteArgs<ExtArgs>>): Prisma__PracticeReportClient<$Result.GetResult<Prisma.$PracticeReportPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one PracticeReport.
     * @param {PracticeReportUpdateArgs} args - Arguments to update one PracticeReport.
     * @example
     * // Update one PracticeReport
     * const practiceReport = await prisma.practiceReport.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PracticeReportUpdateArgs>(args: SelectSubset<T, PracticeReportUpdateArgs<ExtArgs>>): Prisma__PracticeReportClient<$Result.GetResult<Prisma.$PracticeReportPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more PracticeReports.
     * @param {PracticeReportDeleteManyArgs} args - Arguments to filter PracticeReports to delete.
     * @example
     * // Delete a few PracticeReports
     * const { count } = await prisma.practiceReport.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PracticeReportDeleteManyArgs>(args?: SelectSubset<T, PracticeReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PracticeReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PracticeReports
     * const practiceReport = await prisma.practiceReport.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PracticeReportUpdateManyArgs>(args: SelectSubset<T, PracticeReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PracticeReports and returns the data updated in the database.
     * @param {PracticeReportUpdateManyAndReturnArgs} args - Arguments to update many PracticeReports.
     * @example
     * // Update many PracticeReports
     * const practiceReport = await prisma.practiceReport.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more PracticeReports and only return the `id`
     * const practiceReportWithIdOnly = await prisma.practiceReport.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PracticeReportUpdateManyAndReturnArgs>(args: SelectSubset<T, PracticeReportUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PracticeReportPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one PracticeReport.
     * @param {PracticeReportUpsertArgs} args - Arguments to update or create a PracticeReport.
     * @example
     * // Update or create a PracticeReport
     * const practiceReport = await prisma.practiceReport.upsert({
     *   create: {
     *     // ... data to create a PracticeReport
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PracticeReport we want to update
     *   }
     * })
     */
    upsert<T extends PracticeReportUpsertArgs>(args: SelectSubset<T, PracticeReportUpsertArgs<ExtArgs>>): Prisma__PracticeReportClient<$Result.GetResult<Prisma.$PracticeReportPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of PracticeReports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeReportCountArgs} args - Arguments to filter PracticeReports to count.
     * @example
     * // Count the number of PracticeReports
     * const count = await prisma.practiceReport.count({
     *   where: {
     *     // ... the filter for the PracticeReports we want to count
     *   }
     * })
    **/
    count<T extends PracticeReportCountArgs>(
      args?: Subset<T, PracticeReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PracticeReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PracticeReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PracticeReportAggregateArgs>(args: Subset<T, PracticeReportAggregateArgs>): Prisma.PrismaPromise<GetPracticeReportAggregateType<T>>

    /**
     * Group by PracticeReport.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PracticeReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PracticeReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PracticeReportGroupByArgs['orderBy'] }
        : { orderBy?: PracticeReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PracticeReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPracticeReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PracticeReport model
   */
  readonly fields: PracticeReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PracticeReport.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PracticeReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    practice<T extends PracticeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PracticeDefaultArgs<ExtArgs>>): Prisma__PracticeClient<$Result.GetResult<Prisma.$PracticePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the PracticeReport model
   */
  interface PracticeReportFieldRefs {
    readonly id: FieldRef<"PracticeReport", 'String'>
    readonly practiceId: FieldRef<"PracticeReport", 'String'>
    readonly userId: FieldRef<"PracticeReport", 'String'>
    readonly date: FieldRef<"PracticeReport", 'DateTime'>
    readonly activities: FieldRef<"PracticeReport", 'String'>
    readonly hours: FieldRef<"PracticeReport", 'Int'>
    readonly observations: FieldRef<"PracticeReport", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PracticeReport findUnique
   */
  export type PracticeReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeReport
     */
    select?: PracticeReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeReport
     */
    omit?: PracticeReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeReportInclude<ExtArgs> | null
    /**
     * Filter, which PracticeReport to fetch.
     */
    where: PracticeReportWhereUniqueInput
  }

  /**
   * PracticeReport findUniqueOrThrow
   */
  export type PracticeReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeReport
     */
    select?: PracticeReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeReport
     */
    omit?: PracticeReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeReportInclude<ExtArgs> | null
    /**
     * Filter, which PracticeReport to fetch.
     */
    where: PracticeReportWhereUniqueInput
  }

  /**
   * PracticeReport findFirst
   */
  export type PracticeReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeReport
     */
    select?: PracticeReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeReport
     */
    omit?: PracticeReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeReportInclude<ExtArgs> | null
    /**
     * Filter, which PracticeReport to fetch.
     */
    where?: PracticeReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PracticeReports to fetch.
     */
    orderBy?: PracticeReportOrderByWithRelationInput | PracticeReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PracticeReports.
     */
    cursor?: PracticeReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PracticeReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PracticeReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PracticeReports.
     */
    distinct?: PracticeReportScalarFieldEnum | PracticeReportScalarFieldEnum[]
  }

  /**
   * PracticeReport findFirstOrThrow
   */
  export type PracticeReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeReport
     */
    select?: PracticeReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeReport
     */
    omit?: PracticeReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeReportInclude<ExtArgs> | null
    /**
     * Filter, which PracticeReport to fetch.
     */
    where?: PracticeReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PracticeReports to fetch.
     */
    orderBy?: PracticeReportOrderByWithRelationInput | PracticeReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PracticeReports.
     */
    cursor?: PracticeReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PracticeReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PracticeReports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PracticeReports.
     */
    distinct?: PracticeReportScalarFieldEnum | PracticeReportScalarFieldEnum[]
  }

  /**
   * PracticeReport findMany
   */
  export type PracticeReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeReport
     */
    select?: PracticeReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeReport
     */
    omit?: PracticeReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeReportInclude<ExtArgs> | null
    /**
     * Filter, which PracticeReports to fetch.
     */
    where?: PracticeReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PracticeReports to fetch.
     */
    orderBy?: PracticeReportOrderByWithRelationInput | PracticeReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PracticeReports.
     */
    cursor?: PracticeReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PracticeReports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PracticeReports.
     */
    skip?: number
    distinct?: PracticeReportScalarFieldEnum | PracticeReportScalarFieldEnum[]
  }

  /**
   * PracticeReport create
   */
  export type PracticeReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeReport
     */
    select?: PracticeReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeReport
     */
    omit?: PracticeReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeReportInclude<ExtArgs> | null
    /**
     * The data needed to create a PracticeReport.
     */
    data: XOR<PracticeReportCreateInput, PracticeReportUncheckedCreateInput>
  }

  /**
   * PracticeReport createMany
   */
  export type PracticeReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PracticeReports.
     */
    data: PracticeReportCreateManyInput | PracticeReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PracticeReport createManyAndReturn
   */
  export type PracticeReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeReport
     */
    select?: PracticeReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeReport
     */
    omit?: PracticeReportOmit<ExtArgs> | null
    /**
     * The data used to create many PracticeReports.
     */
    data: PracticeReportCreateManyInput | PracticeReportCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeReportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * PracticeReport update
   */
  export type PracticeReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeReport
     */
    select?: PracticeReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeReport
     */
    omit?: PracticeReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeReportInclude<ExtArgs> | null
    /**
     * The data needed to update a PracticeReport.
     */
    data: XOR<PracticeReportUpdateInput, PracticeReportUncheckedUpdateInput>
    /**
     * Choose, which PracticeReport to update.
     */
    where: PracticeReportWhereUniqueInput
  }

  /**
   * PracticeReport updateMany
   */
  export type PracticeReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PracticeReports.
     */
    data: XOR<PracticeReportUpdateManyMutationInput, PracticeReportUncheckedUpdateManyInput>
    /**
     * Filter which PracticeReports to update
     */
    where?: PracticeReportWhereInput
    /**
     * Limit how many PracticeReports to update.
     */
    limit?: number
  }

  /**
   * PracticeReport updateManyAndReturn
   */
  export type PracticeReportUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeReport
     */
    select?: PracticeReportSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeReport
     */
    omit?: PracticeReportOmit<ExtArgs> | null
    /**
     * The data used to update PracticeReports.
     */
    data: XOR<PracticeReportUpdateManyMutationInput, PracticeReportUncheckedUpdateManyInput>
    /**
     * Filter which PracticeReports to update
     */
    where?: PracticeReportWhereInput
    /**
     * Limit how many PracticeReports to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeReportIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * PracticeReport upsert
   */
  export type PracticeReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeReport
     */
    select?: PracticeReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeReport
     */
    omit?: PracticeReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeReportInclude<ExtArgs> | null
    /**
     * The filter to search for the PracticeReport to update in case it exists.
     */
    where: PracticeReportWhereUniqueInput
    /**
     * In case the PracticeReport found by the `where` argument doesn't exist, create a new PracticeReport with this data.
     */
    create: XOR<PracticeReportCreateInput, PracticeReportUncheckedCreateInput>
    /**
     * In case the PracticeReport was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PracticeReportUpdateInput, PracticeReportUncheckedUpdateInput>
  }

  /**
   * PracticeReport delete
   */
  export type PracticeReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeReport
     */
    select?: PracticeReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeReport
     */
    omit?: PracticeReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeReportInclude<ExtArgs> | null
    /**
     * Filter which PracticeReport to delete.
     */
    where: PracticeReportWhereUniqueInput
  }

  /**
   * PracticeReport deleteMany
   */
  export type PracticeReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PracticeReports to delete
     */
    where?: PracticeReportWhereInput
    /**
     * Limit how many PracticeReports to delete.
     */
    limit?: number
  }

  /**
   * PracticeReport without action
   */
  export type PracticeReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PracticeReport
     */
    select?: PracticeReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the PracticeReport
     */
    omit?: PracticeReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PracticeReportInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    role: 'role',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PracticeScalarFieldEnum: {
    id: 'id',
    studentId: 'studentId',
    tutorId: 'tutorId',
    teacherId: 'teacherId',
    institution: 'institution',
    startDate: 'startDate',
    endDate: 'endDate',
    status: 'status',
    hours: 'hours',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type PracticeScalarFieldEnum = (typeof PracticeScalarFieldEnum)[keyof typeof PracticeScalarFieldEnum]


  export const PracticeReportScalarFieldEnum: {
    id: 'id',
    practiceId: 'practiceId',
    userId: 'userId',
    date: 'date',
    activities: 'activities',
    hours: 'hours',
    observations: 'observations'
  };

  export type PracticeReportScalarFieldEnum = (typeof PracticeReportScalarFieldEnum)[keyof typeof PracticeReportScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Role[]'
   */
  export type ListEnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'PracticeStatus'
   */
  export type EnumPracticeStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PracticeStatus'>
    


  /**
   * Reference to a field of type 'PracticeStatus[]'
   */
  export type ListEnumPracticeStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'PracticeStatus[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    practicesAsStudent?: PracticeListRelationFilter
    practicesAsTutor?: PracticeListRelationFilter
    practicesAsTeacher?: PracticeListRelationFilter
    reports?: PracticeReportListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    practicesAsStudent?: PracticeOrderByRelationAggregateInput
    practicesAsTutor?: PracticeOrderByRelationAggregateInput
    practicesAsTeacher?: PracticeOrderByRelationAggregateInput
    reports?: PracticeReportOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    role?: EnumRoleFilter<"User"> | $Enums.Role
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    practicesAsStudent?: PracticeListRelationFilter
    practicesAsTutor?: PracticeListRelationFilter
    practicesAsTeacher?: PracticeListRelationFilter
    reports?: PracticeReportListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringWithAggregatesFilter<"User"> | string
    role?: EnumRoleWithAggregatesFilter<"User"> | $Enums.Role
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type PracticeWhereInput = {
    AND?: PracticeWhereInput | PracticeWhereInput[]
    OR?: PracticeWhereInput[]
    NOT?: PracticeWhereInput | PracticeWhereInput[]
    id?: StringFilter<"Practice"> | string
    studentId?: StringFilter<"Practice"> | string
    tutorId?: StringFilter<"Practice"> | string
    teacherId?: StringFilter<"Practice"> | string
    institution?: StringFilter<"Practice"> | string
    startDate?: DateTimeFilter<"Practice"> | Date | string
    endDate?: DateTimeFilter<"Practice"> | Date | string
    status?: EnumPracticeStatusFilter<"Practice"> | $Enums.PracticeStatus
    hours?: IntFilter<"Practice"> | number
    createdAt?: DateTimeFilter<"Practice"> | Date | string
    updatedAt?: DateTimeFilter<"Practice"> | Date | string
    student?: XOR<UserScalarRelationFilter, UserWhereInput>
    tutor?: XOR<UserScalarRelationFilter, UserWhereInput>
    teacher?: XOR<UserScalarRelationFilter, UserWhereInput>
    reports?: PracticeReportListRelationFilter
  }

  export type PracticeOrderByWithRelationInput = {
    id?: SortOrder
    studentId?: SortOrder
    tutorId?: SortOrder
    teacherId?: SortOrder
    institution?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    hours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    student?: UserOrderByWithRelationInput
    tutor?: UserOrderByWithRelationInput
    teacher?: UserOrderByWithRelationInput
    reports?: PracticeReportOrderByRelationAggregateInput
  }

  export type PracticeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PracticeWhereInput | PracticeWhereInput[]
    OR?: PracticeWhereInput[]
    NOT?: PracticeWhereInput | PracticeWhereInput[]
    studentId?: StringFilter<"Practice"> | string
    tutorId?: StringFilter<"Practice"> | string
    teacherId?: StringFilter<"Practice"> | string
    institution?: StringFilter<"Practice"> | string
    startDate?: DateTimeFilter<"Practice"> | Date | string
    endDate?: DateTimeFilter<"Practice"> | Date | string
    status?: EnumPracticeStatusFilter<"Practice"> | $Enums.PracticeStatus
    hours?: IntFilter<"Practice"> | number
    createdAt?: DateTimeFilter<"Practice"> | Date | string
    updatedAt?: DateTimeFilter<"Practice"> | Date | string
    student?: XOR<UserScalarRelationFilter, UserWhereInput>
    tutor?: XOR<UserScalarRelationFilter, UserWhereInput>
    teacher?: XOR<UserScalarRelationFilter, UserWhereInput>
    reports?: PracticeReportListRelationFilter
  }, "id">

  export type PracticeOrderByWithAggregationInput = {
    id?: SortOrder
    studentId?: SortOrder
    tutorId?: SortOrder
    teacherId?: SortOrder
    institution?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    hours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: PracticeCountOrderByAggregateInput
    _avg?: PracticeAvgOrderByAggregateInput
    _max?: PracticeMaxOrderByAggregateInput
    _min?: PracticeMinOrderByAggregateInput
    _sum?: PracticeSumOrderByAggregateInput
  }

  export type PracticeScalarWhereWithAggregatesInput = {
    AND?: PracticeScalarWhereWithAggregatesInput | PracticeScalarWhereWithAggregatesInput[]
    OR?: PracticeScalarWhereWithAggregatesInput[]
    NOT?: PracticeScalarWhereWithAggregatesInput | PracticeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Practice"> | string
    studentId?: StringWithAggregatesFilter<"Practice"> | string
    tutorId?: StringWithAggregatesFilter<"Practice"> | string
    teacherId?: StringWithAggregatesFilter<"Practice"> | string
    institution?: StringWithAggregatesFilter<"Practice"> | string
    startDate?: DateTimeWithAggregatesFilter<"Practice"> | Date | string
    endDate?: DateTimeWithAggregatesFilter<"Practice"> | Date | string
    status?: EnumPracticeStatusWithAggregatesFilter<"Practice"> | $Enums.PracticeStatus
    hours?: IntWithAggregatesFilter<"Practice"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Practice"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Practice"> | Date | string
  }

  export type PracticeReportWhereInput = {
    AND?: PracticeReportWhereInput | PracticeReportWhereInput[]
    OR?: PracticeReportWhereInput[]
    NOT?: PracticeReportWhereInput | PracticeReportWhereInput[]
    id?: StringFilter<"PracticeReport"> | string
    practiceId?: StringFilter<"PracticeReport"> | string
    userId?: StringFilter<"PracticeReport"> | string
    date?: DateTimeFilter<"PracticeReport"> | Date | string
    activities?: StringFilter<"PracticeReport"> | string
    hours?: IntFilter<"PracticeReport"> | number
    observations?: StringFilter<"PracticeReport"> | string
    practice?: XOR<PracticeScalarRelationFilter, PracticeWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type PracticeReportOrderByWithRelationInput = {
    id?: SortOrder
    practiceId?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    activities?: SortOrder
    hours?: SortOrder
    observations?: SortOrder
    practice?: PracticeOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type PracticeReportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PracticeReportWhereInput | PracticeReportWhereInput[]
    OR?: PracticeReportWhereInput[]
    NOT?: PracticeReportWhereInput | PracticeReportWhereInput[]
    practiceId?: StringFilter<"PracticeReport"> | string
    userId?: StringFilter<"PracticeReport"> | string
    date?: DateTimeFilter<"PracticeReport"> | Date | string
    activities?: StringFilter<"PracticeReport"> | string
    hours?: IntFilter<"PracticeReport"> | number
    observations?: StringFilter<"PracticeReport"> | string
    practice?: XOR<PracticeScalarRelationFilter, PracticeWhereInput>
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type PracticeReportOrderByWithAggregationInput = {
    id?: SortOrder
    practiceId?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    activities?: SortOrder
    hours?: SortOrder
    observations?: SortOrder
    _count?: PracticeReportCountOrderByAggregateInput
    _avg?: PracticeReportAvgOrderByAggregateInput
    _max?: PracticeReportMaxOrderByAggregateInput
    _min?: PracticeReportMinOrderByAggregateInput
    _sum?: PracticeReportSumOrderByAggregateInput
  }

  export type PracticeReportScalarWhereWithAggregatesInput = {
    AND?: PracticeReportScalarWhereWithAggregatesInput | PracticeReportScalarWhereWithAggregatesInput[]
    OR?: PracticeReportScalarWhereWithAggregatesInput[]
    NOT?: PracticeReportScalarWhereWithAggregatesInput | PracticeReportScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"PracticeReport"> | string
    practiceId?: StringWithAggregatesFilter<"PracticeReport"> | string
    userId?: StringWithAggregatesFilter<"PracticeReport"> | string
    date?: DateTimeWithAggregatesFilter<"PracticeReport"> | Date | string
    activities?: StringWithAggregatesFilter<"PracticeReport"> | string
    hours?: IntWithAggregatesFilter<"PracticeReport"> | number
    observations?: StringWithAggregatesFilter<"PracticeReport"> | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name: string
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    practicesAsStudent?: PracticeCreateNestedManyWithoutStudentInput
    practicesAsTutor?: PracticeCreateNestedManyWithoutTutorInput
    practicesAsTeacher?: PracticeCreateNestedManyWithoutTeacherInput
    reports?: PracticeReportCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name: string
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    practicesAsStudent?: PracticeUncheckedCreateNestedManyWithoutStudentInput
    practicesAsTutor?: PracticeUncheckedCreateNestedManyWithoutTutorInput
    practicesAsTeacher?: PracticeUncheckedCreateNestedManyWithoutTeacherInput
    reports?: PracticeReportUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    practicesAsStudent?: PracticeUpdateManyWithoutStudentNestedInput
    practicesAsTutor?: PracticeUpdateManyWithoutTutorNestedInput
    practicesAsTeacher?: PracticeUpdateManyWithoutTeacherNestedInput
    reports?: PracticeReportUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    practicesAsStudent?: PracticeUncheckedUpdateManyWithoutStudentNestedInput
    practicesAsTutor?: PracticeUncheckedUpdateManyWithoutTutorNestedInput
    practicesAsTeacher?: PracticeUncheckedUpdateManyWithoutTeacherNestedInput
    reports?: PracticeReportUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name: string
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticeCreateInput = {
    id?: string
    institution: string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.PracticeStatus
    hours: number
    createdAt?: Date | string
    updatedAt?: Date | string
    student: UserCreateNestedOneWithoutPracticesAsStudentInput
    tutor: UserCreateNestedOneWithoutPracticesAsTutorInput
    teacher: UserCreateNestedOneWithoutPracticesAsTeacherInput
    reports?: PracticeReportCreateNestedManyWithoutPracticeInput
  }

  export type PracticeUncheckedCreateInput = {
    id?: string
    studentId: string
    tutorId: string
    teacherId: string
    institution: string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.PracticeStatus
    hours: number
    createdAt?: Date | string
    updatedAt?: Date | string
    reports?: PracticeReportUncheckedCreateNestedManyWithoutPracticeInput
  }

  export type PracticeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPracticeStatusFieldUpdateOperationsInput | $Enums.PracticeStatus
    hours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutPracticesAsStudentNestedInput
    tutor?: UserUpdateOneRequiredWithoutPracticesAsTutorNestedInput
    teacher?: UserUpdateOneRequiredWithoutPracticesAsTeacherNestedInput
    reports?: PracticeReportUpdateManyWithoutPracticeNestedInput
  }

  export type PracticeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    tutorId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPracticeStatusFieldUpdateOperationsInput | $Enums.PracticeStatus
    hours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: PracticeReportUncheckedUpdateManyWithoutPracticeNestedInput
  }

  export type PracticeCreateManyInput = {
    id?: string
    studentId: string
    tutorId: string
    teacherId: string
    institution: string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.PracticeStatus
    hours: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PracticeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPracticeStatusFieldUpdateOperationsInput | $Enums.PracticeStatus
    hours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    tutorId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPracticeStatusFieldUpdateOperationsInput | $Enums.PracticeStatus
    hours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticeReportCreateInput = {
    id?: string
    date: Date | string
    activities: string
    hours: number
    observations: string
    practice: PracticeCreateNestedOneWithoutReportsInput
    user: UserCreateNestedOneWithoutReportsInput
  }

  export type PracticeReportUncheckedCreateInput = {
    id?: string
    practiceId: string
    userId: string
    date: Date | string
    activities: string
    hours: number
    observations: string
  }

  export type PracticeReportUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: StringFieldUpdateOperationsInput | string
    hours?: IntFieldUpdateOperationsInput | number
    observations?: StringFieldUpdateOperationsInput | string
    practice?: PracticeUpdateOneRequiredWithoutReportsNestedInput
    user?: UserUpdateOneRequiredWithoutReportsNestedInput
  }

  export type PracticeReportUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    practiceId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: StringFieldUpdateOperationsInput | string
    hours?: IntFieldUpdateOperationsInput | number
    observations?: StringFieldUpdateOperationsInput | string
  }

  export type PracticeReportCreateManyInput = {
    id?: string
    practiceId: string
    userId: string
    date: Date | string
    activities: string
    hours: number
    observations: string
  }

  export type PracticeReportUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: StringFieldUpdateOperationsInput | string
    hours?: IntFieldUpdateOperationsInput | number
    observations?: StringFieldUpdateOperationsInput | string
  }

  export type PracticeReportUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    practiceId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: StringFieldUpdateOperationsInput | string
    hours?: IntFieldUpdateOperationsInput | number
    observations?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type PracticeListRelationFilter = {
    every?: PracticeWhereInput
    some?: PracticeWhereInput
    none?: PracticeWhereInput
  }

  export type PracticeReportListRelationFilter = {
    every?: PracticeReportWhereInput
    some?: PracticeReportWhereInput
    none?: PracticeReportWhereInput
  }

  export type PracticeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PracticeReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    role?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type EnumPracticeStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PracticeStatus | EnumPracticeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PracticeStatus[] | ListEnumPracticeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PracticeStatus[] | ListEnumPracticeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPracticeStatusFilter<$PrismaModel> | $Enums.PracticeStatus
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type PracticeCountOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    tutorId?: SortOrder
    teacherId?: SortOrder
    institution?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    hours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PracticeAvgOrderByAggregateInput = {
    hours?: SortOrder
  }

  export type PracticeMaxOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    tutorId?: SortOrder
    teacherId?: SortOrder
    institution?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    hours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PracticeMinOrderByAggregateInput = {
    id?: SortOrder
    studentId?: SortOrder
    tutorId?: SortOrder
    teacherId?: SortOrder
    institution?: SortOrder
    startDate?: SortOrder
    endDate?: SortOrder
    status?: SortOrder
    hours?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type PracticeSumOrderByAggregateInput = {
    hours?: SortOrder
  }

  export type EnumPracticeStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PracticeStatus | EnumPracticeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PracticeStatus[] | ListEnumPracticeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PracticeStatus[] | ListEnumPracticeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPracticeStatusWithAggregatesFilter<$PrismaModel> | $Enums.PracticeStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPracticeStatusFilter<$PrismaModel>
    _max?: NestedEnumPracticeStatusFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type PracticeScalarRelationFilter = {
    is?: PracticeWhereInput
    isNot?: PracticeWhereInput
  }

  export type PracticeReportCountOrderByAggregateInput = {
    id?: SortOrder
    practiceId?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    activities?: SortOrder
    hours?: SortOrder
    observations?: SortOrder
  }

  export type PracticeReportAvgOrderByAggregateInput = {
    hours?: SortOrder
  }

  export type PracticeReportMaxOrderByAggregateInput = {
    id?: SortOrder
    practiceId?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    activities?: SortOrder
    hours?: SortOrder
    observations?: SortOrder
  }

  export type PracticeReportMinOrderByAggregateInput = {
    id?: SortOrder
    practiceId?: SortOrder
    userId?: SortOrder
    date?: SortOrder
    activities?: SortOrder
    hours?: SortOrder
    observations?: SortOrder
  }

  export type PracticeReportSumOrderByAggregateInput = {
    hours?: SortOrder
  }

  export type PracticeCreateNestedManyWithoutStudentInput = {
    create?: XOR<PracticeCreateWithoutStudentInput, PracticeUncheckedCreateWithoutStudentInput> | PracticeCreateWithoutStudentInput[] | PracticeUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: PracticeCreateOrConnectWithoutStudentInput | PracticeCreateOrConnectWithoutStudentInput[]
    createMany?: PracticeCreateManyStudentInputEnvelope
    connect?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
  }

  export type PracticeCreateNestedManyWithoutTutorInput = {
    create?: XOR<PracticeCreateWithoutTutorInput, PracticeUncheckedCreateWithoutTutorInput> | PracticeCreateWithoutTutorInput[] | PracticeUncheckedCreateWithoutTutorInput[]
    connectOrCreate?: PracticeCreateOrConnectWithoutTutorInput | PracticeCreateOrConnectWithoutTutorInput[]
    createMany?: PracticeCreateManyTutorInputEnvelope
    connect?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
  }

  export type PracticeCreateNestedManyWithoutTeacherInput = {
    create?: XOR<PracticeCreateWithoutTeacherInput, PracticeUncheckedCreateWithoutTeacherInput> | PracticeCreateWithoutTeacherInput[] | PracticeUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: PracticeCreateOrConnectWithoutTeacherInput | PracticeCreateOrConnectWithoutTeacherInput[]
    createMany?: PracticeCreateManyTeacherInputEnvelope
    connect?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
  }

  export type PracticeReportCreateNestedManyWithoutUserInput = {
    create?: XOR<PracticeReportCreateWithoutUserInput, PracticeReportUncheckedCreateWithoutUserInput> | PracticeReportCreateWithoutUserInput[] | PracticeReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PracticeReportCreateOrConnectWithoutUserInput | PracticeReportCreateOrConnectWithoutUserInput[]
    createMany?: PracticeReportCreateManyUserInputEnvelope
    connect?: PracticeReportWhereUniqueInput | PracticeReportWhereUniqueInput[]
  }

  export type PracticeUncheckedCreateNestedManyWithoutStudentInput = {
    create?: XOR<PracticeCreateWithoutStudentInput, PracticeUncheckedCreateWithoutStudentInput> | PracticeCreateWithoutStudentInput[] | PracticeUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: PracticeCreateOrConnectWithoutStudentInput | PracticeCreateOrConnectWithoutStudentInput[]
    createMany?: PracticeCreateManyStudentInputEnvelope
    connect?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
  }

  export type PracticeUncheckedCreateNestedManyWithoutTutorInput = {
    create?: XOR<PracticeCreateWithoutTutorInput, PracticeUncheckedCreateWithoutTutorInput> | PracticeCreateWithoutTutorInput[] | PracticeUncheckedCreateWithoutTutorInput[]
    connectOrCreate?: PracticeCreateOrConnectWithoutTutorInput | PracticeCreateOrConnectWithoutTutorInput[]
    createMany?: PracticeCreateManyTutorInputEnvelope
    connect?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
  }

  export type PracticeUncheckedCreateNestedManyWithoutTeacherInput = {
    create?: XOR<PracticeCreateWithoutTeacherInput, PracticeUncheckedCreateWithoutTeacherInput> | PracticeCreateWithoutTeacherInput[] | PracticeUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: PracticeCreateOrConnectWithoutTeacherInput | PracticeCreateOrConnectWithoutTeacherInput[]
    createMany?: PracticeCreateManyTeacherInputEnvelope
    connect?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
  }

  export type PracticeReportUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PracticeReportCreateWithoutUserInput, PracticeReportUncheckedCreateWithoutUserInput> | PracticeReportCreateWithoutUserInput[] | PracticeReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PracticeReportCreateOrConnectWithoutUserInput | PracticeReportCreateOrConnectWithoutUserInput[]
    createMany?: PracticeReportCreateManyUserInputEnvelope
    connect?: PracticeReportWhereUniqueInput | PracticeReportWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type PracticeUpdateManyWithoutStudentNestedInput = {
    create?: XOR<PracticeCreateWithoutStudentInput, PracticeUncheckedCreateWithoutStudentInput> | PracticeCreateWithoutStudentInput[] | PracticeUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: PracticeCreateOrConnectWithoutStudentInput | PracticeCreateOrConnectWithoutStudentInput[]
    upsert?: PracticeUpsertWithWhereUniqueWithoutStudentInput | PracticeUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: PracticeCreateManyStudentInputEnvelope
    set?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    disconnect?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    delete?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    connect?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    update?: PracticeUpdateWithWhereUniqueWithoutStudentInput | PracticeUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: PracticeUpdateManyWithWhereWithoutStudentInput | PracticeUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: PracticeScalarWhereInput | PracticeScalarWhereInput[]
  }

  export type PracticeUpdateManyWithoutTutorNestedInput = {
    create?: XOR<PracticeCreateWithoutTutorInput, PracticeUncheckedCreateWithoutTutorInput> | PracticeCreateWithoutTutorInput[] | PracticeUncheckedCreateWithoutTutorInput[]
    connectOrCreate?: PracticeCreateOrConnectWithoutTutorInput | PracticeCreateOrConnectWithoutTutorInput[]
    upsert?: PracticeUpsertWithWhereUniqueWithoutTutorInput | PracticeUpsertWithWhereUniqueWithoutTutorInput[]
    createMany?: PracticeCreateManyTutorInputEnvelope
    set?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    disconnect?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    delete?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    connect?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    update?: PracticeUpdateWithWhereUniqueWithoutTutorInput | PracticeUpdateWithWhereUniqueWithoutTutorInput[]
    updateMany?: PracticeUpdateManyWithWhereWithoutTutorInput | PracticeUpdateManyWithWhereWithoutTutorInput[]
    deleteMany?: PracticeScalarWhereInput | PracticeScalarWhereInput[]
  }

  export type PracticeUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<PracticeCreateWithoutTeacherInput, PracticeUncheckedCreateWithoutTeacherInput> | PracticeCreateWithoutTeacherInput[] | PracticeUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: PracticeCreateOrConnectWithoutTeacherInput | PracticeCreateOrConnectWithoutTeacherInput[]
    upsert?: PracticeUpsertWithWhereUniqueWithoutTeacherInput | PracticeUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: PracticeCreateManyTeacherInputEnvelope
    set?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    disconnect?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    delete?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    connect?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    update?: PracticeUpdateWithWhereUniqueWithoutTeacherInput | PracticeUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: PracticeUpdateManyWithWhereWithoutTeacherInput | PracticeUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: PracticeScalarWhereInput | PracticeScalarWhereInput[]
  }

  export type PracticeReportUpdateManyWithoutUserNestedInput = {
    create?: XOR<PracticeReportCreateWithoutUserInput, PracticeReportUncheckedCreateWithoutUserInput> | PracticeReportCreateWithoutUserInput[] | PracticeReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PracticeReportCreateOrConnectWithoutUserInput | PracticeReportCreateOrConnectWithoutUserInput[]
    upsert?: PracticeReportUpsertWithWhereUniqueWithoutUserInput | PracticeReportUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PracticeReportCreateManyUserInputEnvelope
    set?: PracticeReportWhereUniqueInput | PracticeReportWhereUniqueInput[]
    disconnect?: PracticeReportWhereUniqueInput | PracticeReportWhereUniqueInput[]
    delete?: PracticeReportWhereUniqueInput | PracticeReportWhereUniqueInput[]
    connect?: PracticeReportWhereUniqueInput | PracticeReportWhereUniqueInput[]
    update?: PracticeReportUpdateWithWhereUniqueWithoutUserInput | PracticeReportUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PracticeReportUpdateManyWithWhereWithoutUserInput | PracticeReportUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PracticeReportScalarWhereInput | PracticeReportScalarWhereInput[]
  }

  export type PracticeUncheckedUpdateManyWithoutStudentNestedInput = {
    create?: XOR<PracticeCreateWithoutStudentInput, PracticeUncheckedCreateWithoutStudentInput> | PracticeCreateWithoutStudentInput[] | PracticeUncheckedCreateWithoutStudentInput[]
    connectOrCreate?: PracticeCreateOrConnectWithoutStudentInput | PracticeCreateOrConnectWithoutStudentInput[]
    upsert?: PracticeUpsertWithWhereUniqueWithoutStudentInput | PracticeUpsertWithWhereUniqueWithoutStudentInput[]
    createMany?: PracticeCreateManyStudentInputEnvelope
    set?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    disconnect?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    delete?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    connect?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    update?: PracticeUpdateWithWhereUniqueWithoutStudentInput | PracticeUpdateWithWhereUniqueWithoutStudentInput[]
    updateMany?: PracticeUpdateManyWithWhereWithoutStudentInput | PracticeUpdateManyWithWhereWithoutStudentInput[]
    deleteMany?: PracticeScalarWhereInput | PracticeScalarWhereInput[]
  }

  export type PracticeUncheckedUpdateManyWithoutTutorNestedInput = {
    create?: XOR<PracticeCreateWithoutTutorInput, PracticeUncheckedCreateWithoutTutorInput> | PracticeCreateWithoutTutorInput[] | PracticeUncheckedCreateWithoutTutorInput[]
    connectOrCreate?: PracticeCreateOrConnectWithoutTutorInput | PracticeCreateOrConnectWithoutTutorInput[]
    upsert?: PracticeUpsertWithWhereUniqueWithoutTutorInput | PracticeUpsertWithWhereUniqueWithoutTutorInput[]
    createMany?: PracticeCreateManyTutorInputEnvelope
    set?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    disconnect?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    delete?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    connect?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    update?: PracticeUpdateWithWhereUniqueWithoutTutorInput | PracticeUpdateWithWhereUniqueWithoutTutorInput[]
    updateMany?: PracticeUpdateManyWithWhereWithoutTutorInput | PracticeUpdateManyWithWhereWithoutTutorInput[]
    deleteMany?: PracticeScalarWhereInput | PracticeScalarWhereInput[]
  }

  export type PracticeUncheckedUpdateManyWithoutTeacherNestedInput = {
    create?: XOR<PracticeCreateWithoutTeacherInput, PracticeUncheckedCreateWithoutTeacherInput> | PracticeCreateWithoutTeacherInput[] | PracticeUncheckedCreateWithoutTeacherInput[]
    connectOrCreate?: PracticeCreateOrConnectWithoutTeacherInput | PracticeCreateOrConnectWithoutTeacherInput[]
    upsert?: PracticeUpsertWithWhereUniqueWithoutTeacherInput | PracticeUpsertWithWhereUniqueWithoutTeacherInput[]
    createMany?: PracticeCreateManyTeacherInputEnvelope
    set?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    disconnect?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    delete?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    connect?: PracticeWhereUniqueInput | PracticeWhereUniqueInput[]
    update?: PracticeUpdateWithWhereUniqueWithoutTeacherInput | PracticeUpdateWithWhereUniqueWithoutTeacherInput[]
    updateMany?: PracticeUpdateManyWithWhereWithoutTeacherInput | PracticeUpdateManyWithWhereWithoutTeacherInput[]
    deleteMany?: PracticeScalarWhereInput | PracticeScalarWhereInput[]
  }

  export type PracticeReportUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PracticeReportCreateWithoutUserInput, PracticeReportUncheckedCreateWithoutUserInput> | PracticeReportCreateWithoutUserInput[] | PracticeReportUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PracticeReportCreateOrConnectWithoutUserInput | PracticeReportCreateOrConnectWithoutUserInput[]
    upsert?: PracticeReportUpsertWithWhereUniqueWithoutUserInput | PracticeReportUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PracticeReportCreateManyUserInputEnvelope
    set?: PracticeReportWhereUniqueInput | PracticeReportWhereUniqueInput[]
    disconnect?: PracticeReportWhereUniqueInput | PracticeReportWhereUniqueInput[]
    delete?: PracticeReportWhereUniqueInput | PracticeReportWhereUniqueInput[]
    connect?: PracticeReportWhereUniqueInput | PracticeReportWhereUniqueInput[]
    update?: PracticeReportUpdateWithWhereUniqueWithoutUserInput | PracticeReportUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PracticeReportUpdateManyWithWhereWithoutUserInput | PracticeReportUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PracticeReportScalarWhereInput | PracticeReportScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPracticesAsStudentInput = {
    create?: XOR<UserCreateWithoutPracticesAsStudentInput, UserUncheckedCreateWithoutPracticesAsStudentInput>
    connectOrCreate?: UserCreateOrConnectWithoutPracticesAsStudentInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPracticesAsTutorInput = {
    create?: XOR<UserCreateWithoutPracticesAsTutorInput, UserUncheckedCreateWithoutPracticesAsTutorInput>
    connectOrCreate?: UserCreateOrConnectWithoutPracticesAsTutorInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutPracticesAsTeacherInput = {
    create?: XOR<UserCreateWithoutPracticesAsTeacherInput, UserUncheckedCreateWithoutPracticesAsTeacherInput>
    connectOrCreate?: UserCreateOrConnectWithoutPracticesAsTeacherInput
    connect?: UserWhereUniqueInput
  }

  export type PracticeReportCreateNestedManyWithoutPracticeInput = {
    create?: XOR<PracticeReportCreateWithoutPracticeInput, PracticeReportUncheckedCreateWithoutPracticeInput> | PracticeReportCreateWithoutPracticeInput[] | PracticeReportUncheckedCreateWithoutPracticeInput[]
    connectOrCreate?: PracticeReportCreateOrConnectWithoutPracticeInput | PracticeReportCreateOrConnectWithoutPracticeInput[]
    createMany?: PracticeReportCreateManyPracticeInputEnvelope
    connect?: PracticeReportWhereUniqueInput | PracticeReportWhereUniqueInput[]
  }

  export type PracticeReportUncheckedCreateNestedManyWithoutPracticeInput = {
    create?: XOR<PracticeReportCreateWithoutPracticeInput, PracticeReportUncheckedCreateWithoutPracticeInput> | PracticeReportCreateWithoutPracticeInput[] | PracticeReportUncheckedCreateWithoutPracticeInput[]
    connectOrCreate?: PracticeReportCreateOrConnectWithoutPracticeInput | PracticeReportCreateOrConnectWithoutPracticeInput[]
    createMany?: PracticeReportCreateManyPracticeInputEnvelope
    connect?: PracticeReportWhereUniqueInput | PracticeReportWhereUniqueInput[]
  }

  export type EnumPracticeStatusFieldUpdateOperationsInput = {
    set?: $Enums.PracticeStatus
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutPracticesAsStudentNestedInput = {
    create?: XOR<UserCreateWithoutPracticesAsStudentInput, UserUncheckedCreateWithoutPracticesAsStudentInput>
    connectOrCreate?: UserCreateOrConnectWithoutPracticesAsStudentInput
    upsert?: UserUpsertWithoutPracticesAsStudentInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPracticesAsStudentInput, UserUpdateWithoutPracticesAsStudentInput>, UserUncheckedUpdateWithoutPracticesAsStudentInput>
  }

  export type UserUpdateOneRequiredWithoutPracticesAsTutorNestedInput = {
    create?: XOR<UserCreateWithoutPracticesAsTutorInput, UserUncheckedCreateWithoutPracticesAsTutorInput>
    connectOrCreate?: UserCreateOrConnectWithoutPracticesAsTutorInput
    upsert?: UserUpsertWithoutPracticesAsTutorInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPracticesAsTutorInput, UserUpdateWithoutPracticesAsTutorInput>, UserUncheckedUpdateWithoutPracticesAsTutorInput>
  }

  export type UserUpdateOneRequiredWithoutPracticesAsTeacherNestedInput = {
    create?: XOR<UserCreateWithoutPracticesAsTeacherInput, UserUncheckedCreateWithoutPracticesAsTeacherInput>
    connectOrCreate?: UserCreateOrConnectWithoutPracticesAsTeacherInput
    upsert?: UserUpsertWithoutPracticesAsTeacherInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPracticesAsTeacherInput, UserUpdateWithoutPracticesAsTeacherInput>, UserUncheckedUpdateWithoutPracticesAsTeacherInput>
  }

  export type PracticeReportUpdateManyWithoutPracticeNestedInput = {
    create?: XOR<PracticeReportCreateWithoutPracticeInput, PracticeReportUncheckedCreateWithoutPracticeInput> | PracticeReportCreateWithoutPracticeInput[] | PracticeReportUncheckedCreateWithoutPracticeInput[]
    connectOrCreate?: PracticeReportCreateOrConnectWithoutPracticeInput | PracticeReportCreateOrConnectWithoutPracticeInput[]
    upsert?: PracticeReportUpsertWithWhereUniqueWithoutPracticeInput | PracticeReportUpsertWithWhereUniqueWithoutPracticeInput[]
    createMany?: PracticeReportCreateManyPracticeInputEnvelope
    set?: PracticeReportWhereUniqueInput | PracticeReportWhereUniqueInput[]
    disconnect?: PracticeReportWhereUniqueInput | PracticeReportWhereUniqueInput[]
    delete?: PracticeReportWhereUniqueInput | PracticeReportWhereUniqueInput[]
    connect?: PracticeReportWhereUniqueInput | PracticeReportWhereUniqueInput[]
    update?: PracticeReportUpdateWithWhereUniqueWithoutPracticeInput | PracticeReportUpdateWithWhereUniqueWithoutPracticeInput[]
    updateMany?: PracticeReportUpdateManyWithWhereWithoutPracticeInput | PracticeReportUpdateManyWithWhereWithoutPracticeInput[]
    deleteMany?: PracticeReportScalarWhereInput | PracticeReportScalarWhereInput[]
  }

  export type PracticeReportUncheckedUpdateManyWithoutPracticeNestedInput = {
    create?: XOR<PracticeReportCreateWithoutPracticeInput, PracticeReportUncheckedCreateWithoutPracticeInput> | PracticeReportCreateWithoutPracticeInput[] | PracticeReportUncheckedCreateWithoutPracticeInput[]
    connectOrCreate?: PracticeReportCreateOrConnectWithoutPracticeInput | PracticeReportCreateOrConnectWithoutPracticeInput[]
    upsert?: PracticeReportUpsertWithWhereUniqueWithoutPracticeInput | PracticeReportUpsertWithWhereUniqueWithoutPracticeInput[]
    createMany?: PracticeReportCreateManyPracticeInputEnvelope
    set?: PracticeReportWhereUniqueInput | PracticeReportWhereUniqueInput[]
    disconnect?: PracticeReportWhereUniqueInput | PracticeReportWhereUniqueInput[]
    delete?: PracticeReportWhereUniqueInput | PracticeReportWhereUniqueInput[]
    connect?: PracticeReportWhereUniqueInput | PracticeReportWhereUniqueInput[]
    update?: PracticeReportUpdateWithWhereUniqueWithoutPracticeInput | PracticeReportUpdateWithWhereUniqueWithoutPracticeInput[]
    updateMany?: PracticeReportUpdateManyWithWhereWithoutPracticeInput | PracticeReportUpdateManyWithWhereWithoutPracticeInput[]
    deleteMany?: PracticeReportScalarWhereInput | PracticeReportScalarWhereInput[]
  }

  export type PracticeCreateNestedOneWithoutReportsInput = {
    create?: XOR<PracticeCreateWithoutReportsInput, PracticeUncheckedCreateWithoutReportsInput>
    connectOrCreate?: PracticeCreateOrConnectWithoutReportsInput
    connect?: PracticeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutReportsInput = {
    create?: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportsInput
    connect?: UserWhereUniqueInput
  }

  export type PracticeUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<PracticeCreateWithoutReportsInput, PracticeUncheckedCreateWithoutReportsInput>
    connectOrCreate?: PracticeCreateOrConnectWithoutReportsInput
    upsert?: PracticeUpsertWithoutReportsInput
    connect?: PracticeWhereUniqueInput
    update?: XOR<XOR<PracticeUpdateToOneWithWhereWithoutReportsInput, PracticeUpdateWithoutReportsInput>, PracticeUncheckedUpdateWithoutReportsInput>
  }

  export type UserUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    connectOrCreate?: UserCreateOrConnectWithoutReportsInput
    upsert?: UserUpsertWithoutReportsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutReportsInput, UserUpdateWithoutReportsInput>, UserUncheckedUpdateWithoutReportsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    notIn?: $Enums.Role[] | ListEnumRoleFieldRefInput<$PrismaModel>
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedEnumPracticeStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.PracticeStatus | EnumPracticeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PracticeStatus[] | ListEnumPracticeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PracticeStatus[] | ListEnumPracticeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPracticeStatusFilter<$PrismaModel> | $Enums.PracticeStatus
  }

  export type NestedEnumPracticeStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.PracticeStatus | EnumPracticeStatusFieldRefInput<$PrismaModel>
    in?: $Enums.PracticeStatus[] | ListEnumPracticeStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.PracticeStatus[] | ListEnumPracticeStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumPracticeStatusWithAggregatesFilter<$PrismaModel> | $Enums.PracticeStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumPracticeStatusFilter<$PrismaModel>
    _max?: NestedEnumPracticeStatusFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type PracticeCreateWithoutStudentInput = {
    id?: string
    institution: string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.PracticeStatus
    hours: number
    createdAt?: Date | string
    updatedAt?: Date | string
    tutor: UserCreateNestedOneWithoutPracticesAsTutorInput
    teacher: UserCreateNestedOneWithoutPracticesAsTeacherInput
    reports?: PracticeReportCreateNestedManyWithoutPracticeInput
  }

  export type PracticeUncheckedCreateWithoutStudentInput = {
    id?: string
    tutorId: string
    teacherId: string
    institution: string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.PracticeStatus
    hours: number
    createdAt?: Date | string
    updatedAt?: Date | string
    reports?: PracticeReportUncheckedCreateNestedManyWithoutPracticeInput
  }

  export type PracticeCreateOrConnectWithoutStudentInput = {
    where: PracticeWhereUniqueInput
    create: XOR<PracticeCreateWithoutStudentInput, PracticeUncheckedCreateWithoutStudentInput>
  }

  export type PracticeCreateManyStudentInputEnvelope = {
    data: PracticeCreateManyStudentInput | PracticeCreateManyStudentInput[]
    skipDuplicates?: boolean
  }

  export type PracticeCreateWithoutTutorInput = {
    id?: string
    institution: string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.PracticeStatus
    hours: number
    createdAt?: Date | string
    updatedAt?: Date | string
    student: UserCreateNestedOneWithoutPracticesAsStudentInput
    teacher: UserCreateNestedOneWithoutPracticesAsTeacherInput
    reports?: PracticeReportCreateNestedManyWithoutPracticeInput
  }

  export type PracticeUncheckedCreateWithoutTutorInput = {
    id?: string
    studentId: string
    teacherId: string
    institution: string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.PracticeStatus
    hours: number
    createdAt?: Date | string
    updatedAt?: Date | string
    reports?: PracticeReportUncheckedCreateNestedManyWithoutPracticeInput
  }

  export type PracticeCreateOrConnectWithoutTutorInput = {
    where: PracticeWhereUniqueInput
    create: XOR<PracticeCreateWithoutTutorInput, PracticeUncheckedCreateWithoutTutorInput>
  }

  export type PracticeCreateManyTutorInputEnvelope = {
    data: PracticeCreateManyTutorInput | PracticeCreateManyTutorInput[]
    skipDuplicates?: boolean
  }

  export type PracticeCreateWithoutTeacherInput = {
    id?: string
    institution: string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.PracticeStatus
    hours: number
    createdAt?: Date | string
    updatedAt?: Date | string
    student: UserCreateNestedOneWithoutPracticesAsStudentInput
    tutor: UserCreateNestedOneWithoutPracticesAsTutorInput
    reports?: PracticeReportCreateNestedManyWithoutPracticeInput
  }

  export type PracticeUncheckedCreateWithoutTeacherInput = {
    id?: string
    studentId: string
    tutorId: string
    institution: string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.PracticeStatus
    hours: number
    createdAt?: Date | string
    updatedAt?: Date | string
    reports?: PracticeReportUncheckedCreateNestedManyWithoutPracticeInput
  }

  export type PracticeCreateOrConnectWithoutTeacherInput = {
    where: PracticeWhereUniqueInput
    create: XOR<PracticeCreateWithoutTeacherInput, PracticeUncheckedCreateWithoutTeacherInput>
  }

  export type PracticeCreateManyTeacherInputEnvelope = {
    data: PracticeCreateManyTeacherInput | PracticeCreateManyTeacherInput[]
    skipDuplicates?: boolean
  }

  export type PracticeReportCreateWithoutUserInput = {
    id?: string
    date: Date | string
    activities: string
    hours: number
    observations: string
    practice: PracticeCreateNestedOneWithoutReportsInput
  }

  export type PracticeReportUncheckedCreateWithoutUserInput = {
    id?: string
    practiceId: string
    date: Date | string
    activities: string
    hours: number
    observations: string
  }

  export type PracticeReportCreateOrConnectWithoutUserInput = {
    where: PracticeReportWhereUniqueInput
    create: XOR<PracticeReportCreateWithoutUserInput, PracticeReportUncheckedCreateWithoutUserInput>
  }

  export type PracticeReportCreateManyUserInputEnvelope = {
    data: PracticeReportCreateManyUserInput | PracticeReportCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PracticeUpsertWithWhereUniqueWithoutStudentInput = {
    where: PracticeWhereUniqueInput
    update: XOR<PracticeUpdateWithoutStudentInput, PracticeUncheckedUpdateWithoutStudentInput>
    create: XOR<PracticeCreateWithoutStudentInput, PracticeUncheckedCreateWithoutStudentInput>
  }

  export type PracticeUpdateWithWhereUniqueWithoutStudentInput = {
    where: PracticeWhereUniqueInput
    data: XOR<PracticeUpdateWithoutStudentInput, PracticeUncheckedUpdateWithoutStudentInput>
  }

  export type PracticeUpdateManyWithWhereWithoutStudentInput = {
    where: PracticeScalarWhereInput
    data: XOR<PracticeUpdateManyMutationInput, PracticeUncheckedUpdateManyWithoutStudentInput>
  }

  export type PracticeScalarWhereInput = {
    AND?: PracticeScalarWhereInput | PracticeScalarWhereInput[]
    OR?: PracticeScalarWhereInput[]
    NOT?: PracticeScalarWhereInput | PracticeScalarWhereInput[]
    id?: StringFilter<"Practice"> | string
    studentId?: StringFilter<"Practice"> | string
    tutorId?: StringFilter<"Practice"> | string
    teacherId?: StringFilter<"Practice"> | string
    institution?: StringFilter<"Practice"> | string
    startDate?: DateTimeFilter<"Practice"> | Date | string
    endDate?: DateTimeFilter<"Practice"> | Date | string
    status?: EnumPracticeStatusFilter<"Practice"> | $Enums.PracticeStatus
    hours?: IntFilter<"Practice"> | number
    createdAt?: DateTimeFilter<"Practice"> | Date | string
    updatedAt?: DateTimeFilter<"Practice"> | Date | string
  }

  export type PracticeUpsertWithWhereUniqueWithoutTutorInput = {
    where: PracticeWhereUniqueInput
    update: XOR<PracticeUpdateWithoutTutorInput, PracticeUncheckedUpdateWithoutTutorInput>
    create: XOR<PracticeCreateWithoutTutorInput, PracticeUncheckedCreateWithoutTutorInput>
  }

  export type PracticeUpdateWithWhereUniqueWithoutTutorInput = {
    where: PracticeWhereUniqueInput
    data: XOR<PracticeUpdateWithoutTutorInput, PracticeUncheckedUpdateWithoutTutorInput>
  }

  export type PracticeUpdateManyWithWhereWithoutTutorInput = {
    where: PracticeScalarWhereInput
    data: XOR<PracticeUpdateManyMutationInput, PracticeUncheckedUpdateManyWithoutTutorInput>
  }

  export type PracticeUpsertWithWhereUniqueWithoutTeacherInput = {
    where: PracticeWhereUniqueInput
    update: XOR<PracticeUpdateWithoutTeacherInput, PracticeUncheckedUpdateWithoutTeacherInput>
    create: XOR<PracticeCreateWithoutTeacherInput, PracticeUncheckedCreateWithoutTeacherInput>
  }

  export type PracticeUpdateWithWhereUniqueWithoutTeacherInput = {
    where: PracticeWhereUniqueInput
    data: XOR<PracticeUpdateWithoutTeacherInput, PracticeUncheckedUpdateWithoutTeacherInput>
  }

  export type PracticeUpdateManyWithWhereWithoutTeacherInput = {
    where: PracticeScalarWhereInput
    data: XOR<PracticeUpdateManyMutationInput, PracticeUncheckedUpdateManyWithoutTeacherInput>
  }

  export type PracticeReportUpsertWithWhereUniqueWithoutUserInput = {
    where: PracticeReportWhereUniqueInput
    update: XOR<PracticeReportUpdateWithoutUserInput, PracticeReportUncheckedUpdateWithoutUserInput>
    create: XOR<PracticeReportCreateWithoutUserInput, PracticeReportUncheckedCreateWithoutUserInput>
  }

  export type PracticeReportUpdateWithWhereUniqueWithoutUserInput = {
    where: PracticeReportWhereUniqueInput
    data: XOR<PracticeReportUpdateWithoutUserInput, PracticeReportUncheckedUpdateWithoutUserInput>
  }

  export type PracticeReportUpdateManyWithWhereWithoutUserInput = {
    where: PracticeReportScalarWhereInput
    data: XOR<PracticeReportUpdateManyMutationInput, PracticeReportUncheckedUpdateManyWithoutUserInput>
  }

  export type PracticeReportScalarWhereInput = {
    AND?: PracticeReportScalarWhereInput | PracticeReportScalarWhereInput[]
    OR?: PracticeReportScalarWhereInput[]
    NOT?: PracticeReportScalarWhereInput | PracticeReportScalarWhereInput[]
    id?: StringFilter<"PracticeReport"> | string
    practiceId?: StringFilter<"PracticeReport"> | string
    userId?: StringFilter<"PracticeReport"> | string
    date?: DateTimeFilter<"PracticeReport"> | Date | string
    activities?: StringFilter<"PracticeReport"> | string
    hours?: IntFilter<"PracticeReport"> | number
    observations?: StringFilter<"PracticeReport"> | string
  }

  export type UserCreateWithoutPracticesAsStudentInput = {
    id?: string
    email: string
    name: string
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    practicesAsTutor?: PracticeCreateNestedManyWithoutTutorInput
    practicesAsTeacher?: PracticeCreateNestedManyWithoutTeacherInput
    reports?: PracticeReportCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPracticesAsStudentInput = {
    id?: string
    email: string
    name: string
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    practicesAsTutor?: PracticeUncheckedCreateNestedManyWithoutTutorInput
    practicesAsTeacher?: PracticeUncheckedCreateNestedManyWithoutTeacherInput
    reports?: PracticeReportUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPracticesAsStudentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPracticesAsStudentInput, UserUncheckedCreateWithoutPracticesAsStudentInput>
  }

  export type UserCreateWithoutPracticesAsTutorInput = {
    id?: string
    email: string
    name: string
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    practicesAsStudent?: PracticeCreateNestedManyWithoutStudentInput
    practicesAsTeacher?: PracticeCreateNestedManyWithoutTeacherInput
    reports?: PracticeReportCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPracticesAsTutorInput = {
    id?: string
    email: string
    name: string
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    practicesAsStudent?: PracticeUncheckedCreateNestedManyWithoutStudentInput
    practicesAsTeacher?: PracticeUncheckedCreateNestedManyWithoutTeacherInput
    reports?: PracticeReportUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPracticesAsTutorInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPracticesAsTutorInput, UserUncheckedCreateWithoutPracticesAsTutorInput>
  }

  export type UserCreateWithoutPracticesAsTeacherInput = {
    id?: string
    email: string
    name: string
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    practicesAsStudent?: PracticeCreateNestedManyWithoutStudentInput
    practicesAsTutor?: PracticeCreateNestedManyWithoutTutorInput
    reports?: PracticeReportCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPracticesAsTeacherInput = {
    id?: string
    email: string
    name: string
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    practicesAsStudent?: PracticeUncheckedCreateNestedManyWithoutStudentInput
    practicesAsTutor?: PracticeUncheckedCreateNestedManyWithoutTutorInput
    reports?: PracticeReportUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPracticesAsTeacherInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPracticesAsTeacherInput, UserUncheckedCreateWithoutPracticesAsTeacherInput>
  }

  export type PracticeReportCreateWithoutPracticeInput = {
    id?: string
    date: Date | string
    activities: string
    hours: number
    observations: string
    user: UserCreateNestedOneWithoutReportsInput
  }

  export type PracticeReportUncheckedCreateWithoutPracticeInput = {
    id?: string
    userId: string
    date: Date | string
    activities: string
    hours: number
    observations: string
  }

  export type PracticeReportCreateOrConnectWithoutPracticeInput = {
    where: PracticeReportWhereUniqueInput
    create: XOR<PracticeReportCreateWithoutPracticeInput, PracticeReportUncheckedCreateWithoutPracticeInput>
  }

  export type PracticeReportCreateManyPracticeInputEnvelope = {
    data: PracticeReportCreateManyPracticeInput | PracticeReportCreateManyPracticeInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPracticesAsStudentInput = {
    update: XOR<UserUpdateWithoutPracticesAsStudentInput, UserUncheckedUpdateWithoutPracticesAsStudentInput>
    create: XOR<UserCreateWithoutPracticesAsStudentInput, UserUncheckedCreateWithoutPracticesAsStudentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPracticesAsStudentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPracticesAsStudentInput, UserUncheckedUpdateWithoutPracticesAsStudentInput>
  }

  export type UserUpdateWithoutPracticesAsStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    practicesAsTutor?: PracticeUpdateManyWithoutTutorNestedInput
    practicesAsTeacher?: PracticeUpdateManyWithoutTeacherNestedInput
    reports?: PracticeReportUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPracticesAsStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    practicesAsTutor?: PracticeUncheckedUpdateManyWithoutTutorNestedInput
    practicesAsTeacher?: PracticeUncheckedUpdateManyWithoutTeacherNestedInput
    reports?: PracticeReportUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutPracticesAsTutorInput = {
    update: XOR<UserUpdateWithoutPracticesAsTutorInput, UserUncheckedUpdateWithoutPracticesAsTutorInput>
    create: XOR<UserCreateWithoutPracticesAsTutorInput, UserUncheckedCreateWithoutPracticesAsTutorInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPracticesAsTutorInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPracticesAsTutorInput, UserUncheckedUpdateWithoutPracticesAsTutorInput>
  }

  export type UserUpdateWithoutPracticesAsTutorInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    practicesAsStudent?: PracticeUpdateManyWithoutStudentNestedInput
    practicesAsTeacher?: PracticeUpdateManyWithoutTeacherNestedInput
    reports?: PracticeReportUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPracticesAsTutorInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    practicesAsStudent?: PracticeUncheckedUpdateManyWithoutStudentNestedInput
    practicesAsTeacher?: PracticeUncheckedUpdateManyWithoutTeacherNestedInput
    reports?: PracticeReportUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUpsertWithoutPracticesAsTeacherInput = {
    update: XOR<UserUpdateWithoutPracticesAsTeacherInput, UserUncheckedUpdateWithoutPracticesAsTeacherInput>
    create: XOR<UserCreateWithoutPracticesAsTeacherInput, UserUncheckedCreateWithoutPracticesAsTeacherInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPracticesAsTeacherInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPracticesAsTeacherInput, UserUncheckedUpdateWithoutPracticesAsTeacherInput>
  }

  export type UserUpdateWithoutPracticesAsTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    practicesAsStudent?: PracticeUpdateManyWithoutStudentNestedInput
    practicesAsTutor?: PracticeUpdateManyWithoutTutorNestedInput
    reports?: PracticeReportUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPracticesAsTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    practicesAsStudent?: PracticeUncheckedUpdateManyWithoutStudentNestedInput
    practicesAsTutor?: PracticeUncheckedUpdateManyWithoutTutorNestedInput
    reports?: PracticeReportUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PracticeReportUpsertWithWhereUniqueWithoutPracticeInput = {
    where: PracticeReportWhereUniqueInput
    update: XOR<PracticeReportUpdateWithoutPracticeInput, PracticeReportUncheckedUpdateWithoutPracticeInput>
    create: XOR<PracticeReportCreateWithoutPracticeInput, PracticeReportUncheckedCreateWithoutPracticeInput>
  }

  export type PracticeReportUpdateWithWhereUniqueWithoutPracticeInput = {
    where: PracticeReportWhereUniqueInput
    data: XOR<PracticeReportUpdateWithoutPracticeInput, PracticeReportUncheckedUpdateWithoutPracticeInput>
  }

  export type PracticeReportUpdateManyWithWhereWithoutPracticeInput = {
    where: PracticeReportScalarWhereInput
    data: XOR<PracticeReportUpdateManyMutationInput, PracticeReportUncheckedUpdateManyWithoutPracticeInput>
  }

  export type PracticeCreateWithoutReportsInput = {
    id?: string
    institution: string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.PracticeStatus
    hours: number
    createdAt?: Date | string
    updatedAt?: Date | string
    student: UserCreateNestedOneWithoutPracticesAsStudentInput
    tutor: UserCreateNestedOneWithoutPracticesAsTutorInput
    teacher: UserCreateNestedOneWithoutPracticesAsTeacherInput
  }

  export type PracticeUncheckedCreateWithoutReportsInput = {
    id?: string
    studentId: string
    tutorId: string
    teacherId: string
    institution: string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.PracticeStatus
    hours: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PracticeCreateOrConnectWithoutReportsInput = {
    where: PracticeWhereUniqueInput
    create: XOR<PracticeCreateWithoutReportsInput, PracticeUncheckedCreateWithoutReportsInput>
  }

  export type UserCreateWithoutReportsInput = {
    id?: string
    email: string
    name: string
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    practicesAsStudent?: PracticeCreateNestedManyWithoutStudentInput
    practicesAsTutor?: PracticeCreateNestedManyWithoutTutorInput
    practicesAsTeacher?: PracticeCreateNestedManyWithoutTeacherInput
  }

  export type UserUncheckedCreateWithoutReportsInput = {
    id?: string
    email: string
    name: string
    role: $Enums.Role
    createdAt?: Date | string
    updatedAt?: Date | string
    practicesAsStudent?: PracticeUncheckedCreateNestedManyWithoutStudentInput
    practicesAsTutor?: PracticeUncheckedCreateNestedManyWithoutTutorInput
    practicesAsTeacher?: PracticeUncheckedCreateNestedManyWithoutTeacherInput
  }

  export type UserCreateOrConnectWithoutReportsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
  }

  export type PracticeUpsertWithoutReportsInput = {
    update: XOR<PracticeUpdateWithoutReportsInput, PracticeUncheckedUpdateWithoutReportsInput>
    create: XOR<PracticeCreateWithoutReportsInput, PracticeUncheckedCreateWithoutReportsInput>
    where?: PracticeWhereInput
  }

  export type PracticeUpdateToOneWithWhereWithoutReportsInput = {
    where?: PracticeWhereInput
    data: XOR<PracticeUpdateWithoutReportsInput, PracticeUncheckedUpdateWithoutReportsInput>
  }

  export type PracticeUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPracticeStatusFieldUpdateOperationsInput | $Enums.PracticeStatus
    hours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutPracticesAsStudentNestedInput
    tutor?: UserUpdateOneRequiredWithoutPracticesAsTutorNestedInput
    teacher?: UserUpdateOneRequiredWithoutPracticesAsTeacherNestedInput
  }

  export type PracticeUncheckedUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    tutorId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPracticeStatusFieldUpdateOperationsInput | $Enums.PracticeStatus
    hours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpsertWithoutReportsInput = {
    update: XOR<UserUpdateWithoutReportsInput, UserUncheckedUpdateWithoutReportsInput>
    create: XOR<UserCreateWithoutReportsInput, UserUncheckedCreateWithoutReportsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutReportsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutReportsInput, UserUncheckedUpdateWithoutReportsInput>
  }

  export type UserUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    practicesAsStudent?: PracticeUpdateManyWithoutStudentNestedInput
    practicesAsTutor?: PracticeUpdateManyWithoutTutorNestedInput
    practicesAsTeacher?: PracticeUpdateManyWithoutTeacherNestedInput
  }

  export type UserUncheckedUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    practicesAsStudent?: PracticeUncheckedUpdateManyWithoutStudentNestedInput
    practicesAsTutor?: PracticeUncheckedUpdateManyWithoutTutorNestedInput
    practicesAsTeacher?: PracticeUncheckedUpdateManyWithoutTeacherNestedInput
  }

  export type PracticeCreateManyStudentInput = {
    id?: string
    tutorId: string
    teacherId: string
    institution: string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.PracticeStatus
    hours: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PracticeCreateManyTutorInput = {
    id?: string
    studentId: string
    teacherId: string
    institution: string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.PracticeStatus
    hours: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PracticeCreateManyTeacherInput = {
    id?: string
    studentId: string
    tutorId: string
    institution: string
    startDate: Date | string
    endDate: Date | string
    status?: $Enums.PracticeStatus
    hours: number
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type PracticeReportCreateManyUserInput = {
    id?: string
    practiceId: string
    date: Date | string
    activities: string
    hours: number
    observations: string
  }

  export type PracticeUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPracticeStatusFieldUpdateOperationsInput | $Enums.PracticeStatus
    hours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tutor?: UserUpdateOneRequiredWithoutPracticesAsTutorNestedInput
    teacher?: UserUpdateOneRequiredWithoutPracticesAsTeacherNestedInput
    reports?: PracticeReportUpdateManyWithoutPracticeNestedInput
  }

  export type PracticeUncheckedUpdateWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    tutorId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPracticeStatusFieldUpdateOperationsInput | $Enums.PracticeStatus
    hours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: PracticeReportUncheckedUpdateManyWithoutPracticeNestedInput
  }

  export type PracticeUncheckedUpdateManyWithoutStudentInput = {
    id?: StringFieldUpdateOperationsInput | string
    tutorId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPracticeStatusFieldUpdateOperationsInput | $Enums.PracticeStatus
    hours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticeUpdateWithoutTutorInput = {
    id?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPracticeStatusFieldUpdateOperationsInput | $Enums.PracticeStatus
    hours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutPracticesAsStudentNestedInput
    teacher?: UserUpdateOneRequiredWithoutPracticesAsTeacherNestedInput
    reports?: PracticeReportUpdateManyWithoutPracticeNestedInput
  }

  export type PracticeUncheckedUpdateWithoutTutorInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPracticeStatusFieldUpdateOperationsInput | $Enums.PracticeStatus
    hours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: PracticeReportUncheckedUpdateManyWithoutPracticeNestedInput
  }

  export type PracticeUncheckedUpdateManyWithoutTutorInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    teacherId?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPracticeStatusFieldUpdateOperationsInput | $Enums.PracticeStatus
    hours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticeUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPracticeStatusFieldUpdateOperationsInput | $Enums.PracticeStatus
    hours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    student?: UserUpdateOneRequiredWithoutPracticesAsStudentNestedInput
    tutor?: UserUpdateOneRequiredWithoutPracticesAsTutorNestedInput
    reports?: PracticeReportUpdateManyWithoutPracticeNestedInput
  }

  export type PracticeUncheckedUpdateWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    tutorId?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPracticeStatusFieldUpdateOperationsInput | $Enums.PracticeStatus
    hours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reports?: PracticeReportUncheckedUpdateManyWithoutPracticeNestedInput
  }

  export type PracticeUncheckedUpdateManyWithoutTeacherInput = {
    id?: StringFieldUpdateOperationsInput | string
    studentId?: StringFieldUpdateOperationsInput | string
    tutorId?: StringFieldUpdateOperationsInput | string
    institution?: StringFieldUpdateOperationsInput | string
    startDate?: DateTimeFieldUpdateOperationsInput | Date | string
    endDate?: DateTimeFieldUpdateOperationsInput | Date | string
    status?: EnumPracticeStatusFieldUpdateOperationsInput | $Enums.PracticeStatus
    hours?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PracticeReportUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: StringFieldUpdateOperationsInput | string
    hours?: IntFieldUpdateOperationsInput | number
    observations?: StringFieldUpdateOperationsInput | string
    practice?: PracticeUpdateOneRequiredWithoutReportsNestedInput
  }

  export type PracticeReportUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    practiceId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: StringFieldUpdateOperationsInput | string
    hours?: IntFieldUpdateOperationsInput | number
    observations?: StringFieldUpdateOperationsInput | string
  }

  export type PracticeReportUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    practiceId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: StringFieldUpdateOperationsInput | string
    hours?: IntFieldUpdateOperationsInput | number
    observations?: StringFieldUpdateOperationsInput | string
  }

  export type PracticeReportCreateManyPracticeInput = {
    id?: string
    userId: string
    date: Date | string
    activities: string
    hours: number
    observations: string
  }

  export type PracticeReportUpdateWithoutPracticeInput = {
    id?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: StringFieldUpdateOperationsInput | string
    hours?: IntFieldUpdateOperationsInput | number
    observations?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutReportsNestedInput
  }

  export type PracticeReportUncheckedUpdateWithoutPracticeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: StringFieldUpdateOperationsInput | string
    hours?: IntFieldUpdateOperationsInput | number
    observations?: StringFieldUpdateOperationsInput | string
  }

  export type PracticeReportUncheckedUpdateManyWithoutPracticeInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    activities?: StringFieldUpdateOperationsInput | string
    hours?: IntFieldUpdateOperationsInput | number
    observations?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}